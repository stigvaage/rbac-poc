<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SP.RBAC.API</name>
    </assembly>
    <members>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetAccessAssignments(System.Int32,System.Int32,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{SP.RBAC.API.Entities.AssignmentType},System.Nullable{System.Boolean},System.String)">
            <summary>
            Get all access assignments with optional filtering and pagination
            </summary>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="userId">Filter by user ID</param>
            <param name="roleId">Filter by role ID</param>
            <param name="targetSystemId">Filter by target system ID</param>
            <param name="assignmentType">Filter by assignment type</param>
            <param name="isActive">Filter by active status</param>
            <param name="search">Search in assignment reason and metadata</param>
            <returns>Paginated list of access assignments</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetAccessAssignment(System.Guid)">
            <summary>
            Get access assignment by ID
            </summary>
            <param name="id">Access assignment ID</param>
            <returns>Access assignment details</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.CreateAccessAssignment(SP.RBAC.API.DTOs.CreateAccessAssignmentDto)">
            <summary>
            Create a new access assignment
            </summary>
            <param name="dto">Access assignment creation data</param>
            <returns>Created access assignment</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.UpdateAccessAssignment(System.Guid,SP.RBAC.API.DTOs.UpdateAccessAssignmentDto)">
            <summary>
            Update an existing access assignment
            </summary>
            <param name="id">Access assignment ID</param>
            <param name="dto">Access assignment update data</param>
            <returns>Updated access assignment</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.DeleteAccessAssignment(System.Guid)">
            <summary>
            Delete an access assignment
            </summary>
            <param name="id">Access assignment ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetUserAccessAssignments(System.Guid,System.Boolean)">
            <summary>
            Get access assignments for a specific user
            </summary>
            <param name="userId">User ID</param>
            <param name="includeInactive">Include inactive assignments</param>
            <returns>List of user's access assignments</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetSystemAccessAssignments(System.Guid,System.Boolean)">
            <summary>
            Get access assignments for a specific target system
            </summary>
            <param name="targetSystemId">Target system ID</param>
            <param name="includeInactive">Include inactive assignments</param>
            <returns>List of target system's access assignments</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetAssignmentTypes">
            <summary>
            Get available assignment types enum values
            </summary>
            <returns>List of assignment type values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.UpdateAssignmentStatus(System.Guid,System.Boolean)">
            <summary>
            Activate/deactivate an access assignment
            </summary>
            <param name="id">Access assignment ID</param>
            <param name="isActive">Active status</param>
            <returns>Updated access assignment</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetAccessRules(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{SP.RBAC.API.Entities.TriggerType},System.Nullable{SP.RBAC.API.Entities.ActionType},System.Nullable{System.Boolean})">
            <summary>
            Get all access rules with pagination
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetAccessRule(System.Guid)">
            <summary>
            Get a specific access rule by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.CreateAccessRule(SP.RBAC.API.DTOs.CreateAccessRuleDto)">
            <summary>
            Create a new access rule
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.UpdateAccessRule(System.Guid,SP.RBAC.API.DTOs.UpdateAccessRuleDto)">
            <summary>
            Update an existing access rule
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.DeleteAccessRule(System.Guid)">
            <summary>
            Delete an access rule (soft delete)
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.ExecuteAccessRule(System.Guid)">
            <summary>
            Execute an access rule manually
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetTriggerTypes">
            <summary>
            Get available trigger types
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetActionTypes">
            <summary>
            Get available action types
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetEntityHistory(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get audit history for a specific entity
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetUserActivity(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get audit activity for a specific user
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.Search(SP.RBAC.API.DTOs.AuditSearchRequest,System.Threading.CancellationToken)">
            <summary>
            Search audit logs with advanced filtering
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetComplianceReport(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get compliance report summary
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetActivitySummary(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get activity summary for dashboard
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.EntityDefinitionsController">
            <summary>
            Entity Definitions API - Manages dynamic entity definitions from external integration systems
            </summary>
            <remarks>
            Entity definitions represent the structure and metadata for data entities imported from external systems.
            Each entity definition belongs to an integration system and defines the schema for entity instances.
            
            **Key Features:**
            - Define entities from external systems (HR employees, EMR patients, CRM contacts)
            - Configure entity metadata including table names and primary key fields
            - Manage hierarchical relationships between entities
            - Support for custom sorting and display preferences
            - Flexible metadata storage for system-specific configurations
            
            **Common Use Cases:**
            - Define "Employee" entity from HR system with table mapping
            - Configure "Patient" entity from EMR system with privacy settings
            - Set up "Customer" entity from CRM system with relationship mappings
            - Establish entity hierarchies for organizational structures
            
            **Sample Requests:**
            ```json
            POST /api/entitydefinitions
            {
              "integrationSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Employee",
              "displayName": "Employee Records",
              "description": "Employee entity from HR system",
              "tableName": "Employees",
              "primaryKeyField": "EmployeeId",
              "isActive": true,
              "sortOrder": 1,
              "metadata": "{\"syncFrequency\": \"daily\", \"batchSize\": 500}"
            }
            ```
            
            **Response Structure:**
            All responses include comprehensive entity metadata with integration system details,
            property definition counts, and entity instance counts for resource planning.
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.GetEntityDefinitions(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>
            Retrieve all entity definitions with advanced filtering and pagination
            </summary>
            <remarks>
            Returns a paginated list of entity definitions with comprehensive filtering options.
            Results include integration system details, property definition counts, and entity instance counts.
            
            **Filter Options:**
            - **search**: Filter by name, display name, or description (case-insensitive partial match)
            - **integrationSystemId**: Filter by specific integration system
            - **isActive**: Filter by active/inactive status
            
            **Sorting**: Results are ordered by sort order (ascending), then by name (ascending)
            
            **Example Usage:**
            - `GET /api/entitydefinitions?search=employee&amp;isActive=true&amp;pageSize=20`
            - `GET /api/entitydefinitions?integrationSystemId=123e4567-e89b-12d3-a456-426614174000`
            
            **Performance Notes:**
            - Includes related data (integration system, property definitions count, entity instances count)
            - Large datasets are automatically paginated for optimal performance
            - Consider using smaller page sizes for systems with many entity definitions
            </remarks>
            <param name="pageNumber">Page number for pagination (default: 1, minimum: 1)</param>
            <param name="pageSize">Number of items per page (default: 10, maximum: 100)</param>
            <param name="search">Optional search term to filter by name, display name, or description</param>
            <param name="integrationSystemId">Optional filter by integration system ID</param>
            <param name="isActive">Optional filter by active status (true/false)</param>
            <returns>Paginated list of entity definitions with metadata and related counts</returns>
            <response code="200">Successfully retrieved entity definitions</response>
            <response code="400">Invalid pagination parameters or filter values</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.GetEntityDefinition(System.Guid)">
            <summary>
            Retrieve a specific entity definition by its unique identifier
            </summary>
            <remarks>
            Returns detailed information about a single entity definition including:
            - Complete entity metadata and configuration
            - Integration system details and connection info
            - Count of associated property definitions
            - Count of entity instances using this definition
            
            **Use Cases:**
            - View complete entity configuration before modification
            - Validate entity structure before creating instances
            - Check property definition and instance counts for capacity planning
            - Retrieve entity metadata for custom integration workflows
            
            **Example Response Data:**
            The response includes comprehensive entity metadata, integration system details,
            and related counts to support administrative and operational decisions.
            </remarks>
            <param name="id">Unique identifier of the entity definition</param>
            <returns>Complete entity definition with related data and counts</returns>
            <response code="200">Successfully retrieved entity definition</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.CreateEntityDefinition(SP.RBAC.API.DTOs.CreateEntityDefinitionDto)">
            <summary>
            Create a new entity definition for an integration system
            </summary>
            <remarks>
            Creates a new entity definition that defines the structure for data entities from external systems.
            The entity definition serves as a template for creating entity instances.
            
            **Prerequisites:**
            - Integration system must exist and be active
            - Entity name must be unique within the integration system
            - Table name should match the external system's table/collection name
            - Primary key field should match the external system's identifier field
            
            **Validation Rules:**
            - Integration system ID must reference an existing integration system
            - Entity name must be unique within the specified integration system
            - Required fields: name, displayName, tableName, primaryKeyField
            - Sort order defaults to 0 if not specified
            - IsActive defaults to true if not specified
            
            **Best Practices:**
            - Use descriptive display names for user interfaces
            - Include comprehensive descriptions for documentation
            - Set appropriate sort orders for logical grouping
            - Use metadata field for system-specific configurations
            
            **Example Request:**
            ```json
            {
              "integrationSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Employee",
              "displayName": "Employee Records",
              "description": "Employee entity from HR system with full profile data",
              "tableName": "Employees",
              "primaryKeyField": "EmployeeId",
              "isActive": true,
              "sortOrder": 1,
              "metadata": "{\"syncFrequency\": \"daily\", \"includeArchived\": false}"
            }
            ```
            </remarks>
            <param name="createDto">Entity definition data for creation</param>
            <returns>Created entity definition with generated ID and metadata</returns>
            <response code="201">Entity definition created successfully</response>
            <response code="400">Invalid request data or integration system not found</response>
            <response code="409">Entity definition with the same name already exists in the integration system</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.UpdateEntityDefinition(System.Guid,SP.RBAC.API.DTOs.UpdateEntityDefinitionDto)">
            <summary>
            Update an existing entity definition with new configuration
            </summary>
            <remarks>
            Updates an existing entity definition with new metadata, configuration, or structural changes.
            Supports partial updates while maintaining data integrity and referential constraints.
            
            **Update Capabilities:**
            - Modify entity metadata (name, display name, description)
            - Change integration system assignment (with validation)
            - Update table mapping and primary key field configuration
            - Adjust sort order and active status
            - Update custom metadata and system-specific settings
            
            **Validation and Constraints:**
            - Integration system must exist and be accessible
            - New entity name must be unique within target integration system
            - Cannot change integration system if entity instances exist (contact support)
            - Last modified reason is recommended for audit trail
            
            **Impact Assessment:**
            - Changing integration system may affect existing property definitions
            - Modifying table name or primary key field may impact sync processes
            - Deactivating entity definition stops new instance creation
            
            **Example Request:**
            ```json
            {
              "integrationSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Employee_Updated",
              "displayName": "Employee Records - Enhanced",
              "description": "Enhanced employee entity with additional metadata fields",
              "tableName": "Employees_v2",
              "primaryKeyField": "EmployeeGUID",
              "isActive": true,
              "sortOrder": 2,
              "metadata": "{\"syncFrequency\": \"hourly\", \"includePhotos\": true}",
              "lastModifiedReason": "Updated to support new HR system version"
            }
            ```
            </remarks>
            <param name="id">Unique identifier of the entity definition to update</param>
            <param name="updateDto">Updated entity definition data</param>
            <returns>Updated entity definition with new configuration</returns>
            <response code="200">Entity definition updated successfully</response>
            <response code="400">Invalid request data or integration system not found</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="409">Entity definition with the same name already exists in the target integration system</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.DeleteEntityDefinition(System.Guid)">
            <summary>
            Delete an entity definition (soft delete with dependency validation)
            </summary>
            <remarks>
            Performs a soft delete of an entity definition after validating that no dependent data exists.
            This operation marks the entity definition as deleted without physically removing it from the database.
            
            **Deletion Process:**
            1. Validates that no entity instances reference this definition
            2. Checks for dependent property definitions (automatically handled)
            3. Performs soft delete by setting deletion flags and timestamp
            4. Preserves audit trail and referential data for compliance
            
            **Dependency Validation:**
            - Cannot delete if entity instances exist using this definition
            - Property definitions are automatically handled during deletion
            - Access rules and assignments may need manual cleanup
            
            **Recovery Options:**
            - Soft-deleted entity definitions can be restored by administrators
            - All related metadata and configuration is preserved
            - Recovery process requires database-level access
            
            **Alternative Actions:**
            - Consider deactivating instead of deleting for temporary removal
            - Use archive workflows for long-term data retention
            - Contact support for complex dependency resolution
            
            **Impact Assessment:**
            - Stops all new entity instance creation
            - Existing entity instances remain unaffected
            - Integration sync processes may need reconfiguration
            - Reports and analytics may need filter updates
            </remarks>
            <param name="id">Unique identifier of the entity definition to delete</param>
            <returns>No content on successful deletion</returns>
            <response code="204">Entity definition deleted successfully</response>
            <response code="400">Cannot delete entity definition with existing entity instances</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.GetPropertyDefinitions(System.Guid)">
            <summary>
            Retrieve all property definitions for a specific entity definition
            </summary>
            <remarks>
            Returns a complete list of property definitions that define the structure and metadata
            for individual fields within entity instances of this entity definition.
            
            **Property Definition Details:**
            - Field names, display names, and descriptions
            - Data types and validation rules
            - Index and uniqueness constraints
            - UI metadata and display preferences
            - Source field mappings from external systems
            
            **Use Cases:**
            - View complete entity schema before creating instances
            - Validate property configurations for data import
            - Generate dynamic forms and user interfaces
            - Configure field-level access controls and permissions
            - Plan data migration and transformation workflows
            
            **Sorting and Organization:**
            - Results are ordered by sort order (ascending), then by name (ascending)
            - Property definitions maintain hierarchical structure information
            - Related entity definitions included for context
            
            **Performance Considerations:**
            - Includes complete property metadata for UI generation
            - Entity definition validation occurs before property retrieval
            - Consider caching for frequently accessed entity structures
            
            **Integration Notes:**
            - Property definitions map to external system field structures
            - Source field mappings enable automated data synchronization
            - UI metadata supports custom form generation and validation
            </remarks>
            <param name="id">Unique identifier of the entity definition</param>
            <returns>Complete list of property definitions for the entity definition</returns>
            <response code="200">Successfully retrieved property definitions</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.GetEntityInstances(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{System.Boolean},System.Nullable{SP.RBAC.API.Entities.SyncStatus})">
            <summary>
            Get all entity instances with pagination
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.GetEntityInstance(System.Guid)">
            <summary>
            Get a specific entity instance by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.CreateEntityInstance(SP.RBAC.API.DTOs.CreateEntityInstanceDto)">
            <summary>
            Create a new entity instance
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.UpdateEntityInstance(System.Guid,SP.RBAC.API.DTOs.UpdateEntityInstanceDto)">
            <summary>
            Update an existing entity instance
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.DeleteEntityInstance(System.Guid)">
            <summary>
            Delete an entity instance (soft delete)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.IntegrationDocumentController">
            <summary>
            Controller for managing integration documentation and diagrams
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetIntegrationDocuments(SP.RBAC.API.DTOs.IntegrationDocumentSearchRequest)">
            <summary>
            Gets all integration documents with optional filtering
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetIntegrationDocument(System.Guid)">
            <summary>
            Gets a specific integration document by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.CreateIntegrationDocument(SP.RBAC.API.DTOs.CreateIntegrationDocumentRequest)">
            <summary>
            Creates a new integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.UpdateIntegrationDocument(System.Guid,SP.RBAC.API.DTOs.UpdateIntegrationDocumentRequest)">
            <summary>
            Updates an existing integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.DeactivateIntegrationDocument(System.Guid)">
            <summary>
            Deactivates an integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.ActivateIntegrationDocument(System.Guid)">
            <summary>
            Reactivates a deactivated integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetDocumentsBySystem(System.Guid)">
            <summary>
            Gets all documents for a specific integration system
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetDocumentHistory(System.Guid)">
            <summary>
            Gets document version history
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetDocumentStatistics">
            <summary>
            Gets document statistics by type
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.SearchDocuments(SP.RBAC.API.DTOs.DocumentSearchRequest)">
            <summary>
            Searches documents by content
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.IntegrationMappingController">
            <summary>
            Controller for managing integration mappings between external systems and internal properties
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetIntegrationMappings(SP.RBAC.API.DTOs.IntegrationMappingSearchRequest)">
            <summary>
            Gets all integration mappings with optional filtering
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetIntegrationMapping(System.Guid)">
            <summary>
            Gets a specific integration mapping by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.CreateIntegrationMapping(SP.RBAC.API.DTOs.CreateIntegrationMappingRequest)">
            <summary>
            Creates a new integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.UpdateIntegrationMapping(System.Guid,SP.RBAC.API.DTOs.UpdateIntegrationMappingRequest)">
            <summary>
            Updates an existing integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.DeactivateIntegrationMapping(System.Guid)">
            <summary>
            Deactivates an integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.ActivateIntegrationMapping(System.Guid)">
            <summary>
            Reactivates a deactivated integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetIntegrationMappingStatistics">
            <summary>
            Gets integration mapping statistics
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetMappingsBySystem(System.Guid)">
            <summary>
            Gets integration mappings for a specific system
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.IntegrationSystemsController">
            <summary>
            Manages integration systems that connect external systems to the RBAC platform.
            Integration systems represent external data sources like HR systems, EMR systems, 
            Active Directory, and other enterprise applications.
            </summary>
            <remarks>
            This controller provides full CRUD operations for integration systems along with
            advanced features like connection testing, system health monitoring, and bulk operations.
            All operations support pagination, filtering, and comprehensive error handling.
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.GetIntegrationSystems(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves a paginated list of integration systems with optional filtering
            </summary>
            <remarks>
            This endpoint supports comprehensive filtering and searching across integration systems.
            Use the search parameter to find systems by name, display name, or description.
            The isActive filter allows you to retrieve only active or inactive systems.
            
            Sample request:
            
                GET /api/IntegrationSystems?pageNumber=1&amp;pageSize=10&amp;search=HR&amp;isActive=true
            
            This will return the first 10 active systems that contain "HR" in their name, 
            display name, or description.
            </remarks>
            <param name="pageNumber">Page number for pagination (default: 1, minimum: 1)</param>
            <param name="pageSize">Number of items per page (default: 10, range: 1-100)</param>
            <param name="search">Optional search term to filter by name, display name, or description</param>
            <param name="isActive">Optional filter to show only active (true) or inactive (false) systems</param>
            <returns>A paginated list of integration systems matching the specified criteria</returns>
            <response code="200">Returns the paginated list of integration systems</response>
            <response code="400">If the pagination parameters are invalid</response>
            <response code="500">If an internal server error occurs</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.GetIntegrationSystem(System.Guid)">
            <summary>
            Retrieves a specific integration system by its unique identifier
            </summary>
            <remarks>
            This endpoint returns detailed information about a single integration system,
            including all configuration details, authentication settings, and metadata.
            
            Sample request:
            
                GET /api/IntegrationSystems/123e4567-e89b-12d3-a456-426614174000
            
            The response includes sensitive information like connection strings, so ensure
            proper authentication and authorization are in place for production use.
            </remarks>
            <param name="id">The unique identifier (GUID) of the integration system</param>
            <returns>The integration system with the specified ID</returns>
            <response code="200">Returns the integration system details</response>
            <response code="404">If no integration system exists with the specified ID</response>
            <response code="500">If an internal server error occurs</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.CreateIntegrationSystem(SP.RBAC.API.DTOs.CreateIntegrationSystemDto)">
            <summary>
            Create a new integration system
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.UpdateIntegrationSystem(System.Guid,SP.RBAC.API.DTOs.UpdateIntegrationSystemDto)">
            <summary>
            Update an existing integration system
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.DeleteIntegrationSystem(System.Guid)">
            <summary>
            Delete an integration system (soft delete)
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.TestConnection(System.Guid)">
            <summary>
            Test connection to an integration system
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.GetPropertyDefinitions(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{SP.RBAC.API.Entities.DataType})">
            <summary>
            Get all property definitions with pagination
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.GetPropertyDefinition(System.Guid)">
            <summary>
            Get a specific property definition by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.CreatePropertyDefinition(SP.RBAC.API.DTOs.CreatePropertyDefinitionDto)">
            <summary>
            Create a new property definition
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.UpdatePropertyDefinition(System.Guid,SP.RBAC.API.DTOs.UpdatePropertyDefinitionDto)">
            <summary>
            Update an existing property definition
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.DeletePropertyDefinition(System.Guid)">
            <summary>
            Delete a property definition (soft delete)
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.GetDataTypes">
            <summary>
            Get available data types
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetPropertyValues(System.Int32,System.Int32,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Boolean},System.String)">
            <summary>
            Get all property values with optional filtering and pagination
            </summary>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="entityInstanceId">Filter by entity instance ID</param>
            <param name="propertyDefinitionId">Filter by property definition ID</param>
            <param name="isDefault">Filter by default status</param>
            <param name="search">Search in value and display value</param>
            <returns>Paginated list of property values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetPropertyValue(System.Guid)">
            <summary>
            Get property value by ID
            </summary>
            <param name="id">Property value ID</param>
            <returns>Property value details</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.CreatePropertyValue(SP.RBAC.API.DTOs.CreatePropertyValueDto)">
            <summary>
            Create a new property value
            </summary>
            <param name="dto">Property value creation data</param>
            <returns>Created property value</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.UpdatePropertyValue(System.Guid,SP.RBAC.API.DTOs.UpdatePropertyValueDto)">
            <summary>
            Update an existing property value
            </summary>
            <param name="id">Property value ID</param>
            <param name="dto">Property value update data</param>
            <returns>Updated property value</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.DeletePropertyValue(System.Guid)">
            <summary>
            Delete a property value
            </summary>
            <param name="id">Property value ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetEntityInstancePropertyValues(System.Guid,System.Boolean)">
            <summary>
            Get property values for a specific entity instance
            </summary>
            <param name="entityInstanceId">Entity instance ID</param>
            <param name="includeHistory">Include historical (expired) values</param>
            <returns>List of entity instance's property values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetPropertyDefinitionValues(System.Guid,System.Boolean)">
            <summary>
            Get property values for a specific property definition
            </summary>
            <param name="propertyDefinitionId">Property definition ID</param>
            <param name="includeHistory">Include historical (expired) values</param>
            <returns>List of property definition's values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetEntityInstancePropertyValueHistory(System.Guid)">
            <summary>
            Get property value history for an entity instance grouped by property definition
            </summary>
            <param name="entityInstanceId">Entity instance ID</param>
            <returns>Property value history grouped by property definition</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.ExpirePropertyValue(System.Guid,System.DateTime)">
            <summary>
            Set property value effective end date (expire it)
            </summary>
            <param name="id">Property value ID</param>
            <param name="effectiveTo">Effective end date</param>
            <returns>Updated property value</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncLogs(System.Int32,System.Int32,System.Nullable{System.Guid},System.String,System.Nullable{SP.RBAC.API.Entities.SyncStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get all sync logs with optional filtering and pagination
            </summary>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="integrationSystemId">Filter by integration system ID</param>
            <param name="operation">Filter by operation type</param>
            <param name="status">Filter by sync status</param>
            <param name="startDate">Filter by start date (from)</param>
            <param name="endDate">Filter by start date (to)</param>
            <param name="search">Search in operation and error message</param>
            <returns>Paginated list of sync logs</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncLog(System.Guid)">
            <summary>
            Get sync log by ID
            </summary>
            <param name="id">Sync log ID</param>
            <returns>Sync log details</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.CreateSyncLog(SP.RBAC.API.DTOs.CreateSyncLogDto)">
            <summary>
            Create a new sync log
            </summary>
            <param name="dto">Sync log creation data</param>
            <returns>Created sync log</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.UpdateSyncLog(System.Guid,SP.RBAC.API.DTOs.UpdateSyncLogDto)">
            <summary>
            Update an existing sync log
            </summary>
            <param name="id">Sync log ID</param>
            <param name="dto">Sync log update data</param>
            <returns>Updated sync log</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.DeleteSyncLog(System.Guid)">
            <summary>
            Delete a sync log
            </summary>
            <param name="id">Sync log ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetIntegrationSystemSyncLogs(System.Guid,System.Int32,System.Int32,System.Nullable{SP.RBAC.API.Entities.SyncStatus})">
            <summary>
            Get sync logs for a specific integration system
            </summary>
            <param name="integrationSystemId">Integration system ID</param>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="status">Filter by sync status</param>
            <returns>List of integration system's sync logs</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncStatuses">
            <summary>
            Get sync status enum values
            </summary>
            <returns>List of sync status values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncLogSummary(System.Nullable{System.Guid},System.Int32)">
            <summary>
            Get sync log summary statistics
            </summary>
            <param name="integrationSystemId">Optional filter by integration system</param>
            <param name="days">Number of days to look back (default 30)</param>
            <returns>Sync log summary statistics</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.CompleteSyncLog(System.Guid,SP.RBAC.API.DTOs.UpdateSyncLogDto)">
            <summary>
            Complete a sync log operation
            </summary>
            <param name="id">Sync log ID</param>
            <param name="dto">Completion data</param>
            <returns>Updated sync log</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetRecentFailedSyncLogs(System.Int32,System.Int32)">
            <summary>
            Get recent failed sync logs
            </summary>
            <param name="hours">Number of hours to look back (default 24)</param>
            <param name="limit">Maximum number of records to return (default 50)</param>
            <returns>List of recent failed sync logs</returns>
        </member>
        <member name="T:SP.RBAC.API.Controllers.SystemRelationshipController">
            <summary>
            Controller for managing relationships between integration systems
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetSystemRelationships(SP.RBAC.API.DTOs.SystemRelationshipSearchRequest)">
            <summary>
            Gets all system relationships with optional filtering
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetSystemRelationship(System.Guid)">
            <summary>
            Gets a specific system relationship by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.CreateSystemRelationship(SP.RBAC.API.DTOs.CreateSystemRelationshipRequest)">
            <summary>
            Creates a new system relationship
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.UpdateSystemRelationship(System.Guid,SP.RBAC.API.DTOs.UpdateSystemRelationshipRequest)">
            <summary>
            Updates an existing system relationship
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.DeactivateSystemRelationship(System.Guid)">
            <summary>
            Deactivates a system relationship
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.ActivateSystemRelationship(System.Guid)">
            <summary>
            Reactivates a deactivated system relationship
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetRelationshipsBySystem(System.Guid)">
            <summary>
            Gets all relationships for a specific system (both source and target)
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetIntegrationArchitecture">
            <summary>
            Gets system architecture overview showing all relationships
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetRelationshipStatistics">
            <summary>
            Gets relationship statistics by type
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditLogDto">
            <summary>
            DTO for audit log data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditSearchRequest">
            <summary>
            Request model for audit search operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.ComplianceReportDto">
            <summary>
            DTO for compliance reporting
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.ActivitySummaryDto">
            <summary>
            DTO for activity summary dashboard
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateAuditLogRequest">
            <summary>
            Request model for creating audit log entries
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditOperationResult">
            <summary>
            Response model for audit operation results
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditStatisticsDto">
            <summary>
            DTO for audit log statistics
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.BulkAuditRequest">
            <summary>
            Request model for bulk audit operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.BulkAuditResponse">
            <summary>
            Response model for bulk audit operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingDto">
            <summary>
            DTO for integration mapping data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateIntegrationMappingRequest">
            <summary>
            Request model for creating integration mappings
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.UpdateIntegrationMappingRequest">
            <summary>
            Request model for updating integration mappings
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemRelationshipDto">
            <summary>
            DTO for system relationship data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateSystemRelationshipRequest">
            <summary>
            Request model for creating system relationships
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationDocumentDto">
            <summary>
            DTO for integration document data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateIntegrationDocumentRequest">
            <summary>
            Request model for creating integration documents
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.UpdateIntegrationDocumentRequest">
            <summary>
            Request model for updating integration documents
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingSearchRequest">
            <summary>
            Request model for searching integration mappings
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemRelationshipSearchRequest">
            <summary>
            Request model for searching system relationships
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationDocumentSearchRequest">
            <summary>
            Request model for searching integration documents
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationArchitectureDto">
            <summary>
            Response model for integration architecture overview
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingStatsDto">
            <summary>
            Response model for integration mapping statistics
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.PaginatedResponseDto`1">
            <summary>
            Paginated response wrapper
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingStatisticsDto">
            <summary>
            Integration mapping statistics response
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemMappingCountDto">
            <summary>
            System mapping count DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.UpdateSystemRelationshipRequest">
            <summary>
            Update system relationship request
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemRelationshipsDto">
            <summary>
            System relationships wrapper
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationSystemSummaryDto">
            <summary>
            Integration system summary DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.RelationshipStatisticsDto">
            <summary>
            Relationship statistics DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.RelationshipTypeCountDto">
            <summary>
            Relationship type count DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationDocumentHistoryDto">
            <summary>
            Integration document history DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.DocumentStatisticsDto">
            <summary>
            Document statistics DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.DocumentTypeCountDto">
            <summary>
            Document type count DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.DocumentSearchRequest">
            <summary>
            Document search request
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.AccessAssignment">
            <summary>
            Represents access assignments (user-role-system mappings)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.AccessRule">
            <summary>
            Defines business rules for automatic access assignment
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetHttpContext(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Set HTTP context information for the audit log
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetUserInfo(System.String,System.String)">
            <summary>
            Set user information for the audit log
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetEntityChange(System.String,System.String)">
            <summary>
            Set entity change information
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetJustification(System.String)">
            <summary>
            Set justification for the audit action
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.EntityDefinition">
            <summary>
            Defines the structure of entities within an integration system (e.g., User, Role, Department)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.EntityInstance">
            <summary>
            Represents a specific instance of an entity (e.g., a specific user, role, department)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.RelationshipType">
            <summary>
            Types of relationships between integration systems
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.DocumentType">
            <summary>
            Types of integration documentation
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationMapping">
            <summary>
            Represents a mapping between external system fields and internal entity properties
            Used for documenting and managing data transformations during system integrations
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationMapping.Create(System.Guid,System.Guid,System.String,System.String,System.String)">
            <summary>
            Factory method to create a new integration mapping
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationMappingHistory">
            <summary>
            Tracks changes to integration mappings over time
            Essential for maintaining audit trail of integration configuration changes
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationMappingHistory.Create(System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
            Factory method to create a new mapping history entry
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.SystemRelationship">
            <summary>
            Documents the relationship and dependencies between different integration systems
            Critical for understanding system architecture and impact analysis
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.SystemRelationship.Create(System.Guid,System.Guid,SP.RBAC.API.Entities.RelationshipType,System.String)">
            <summary>
            Factory method to create a new system relationship
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationDocument">
            <summary>
            Stores documentation, diagrams, and procedural information for system integrations
            Serves as a knowledge base for integration management and troubleshooting
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationDocument.Create(System.Guid,System.String,SP.RBAC.API.Entities.DocumentType,System.String)">
            <summary>
            Factory method to create a new integration document
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationDocumentHistory">
            <summary>
            Maintains version history of integration documents
            Enables rollback capabilities and change tracking for documentation
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationDocumentHistory.Create(System.Guid,System.String,System.String,System.Int32,System.String)">
            <summary>
            Factory method to create a new document history entry
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationSystem">
            <summary>
            Represents an external system that can be integrated with the IAM solution
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.PropertyDefinition">
            <summary>
            Defines properties/attributes for entities (e.g., User.Username, User.Email, Role.Name)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.PropertyValue">
            <summary>
            Stores the actual values for entity properties (EAV pattern)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.SyncLog">
            <summary>
            Logs synchronization activities with external systems
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Middleware.AuditMiddleware">
            <summary>
            Middleware to automatically log audit information for HTTP requests
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Middleware.AuditMiddlewareExtensions">
            <summary>
            Extension methods for registering audit middleware
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Middleware.AuditMiddlewareExtensions.UseAuditLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Register the audit middleware in the request pipeline
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Swagger.SwaggerDocumentFilter">
            <summary>
            Document filter to enhance the Swagger documentation with additional metadata and examples
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Swagger.SwaggerResponseExamplesFilter">
            <summary>
            Operation filter to add response examples to Swagger operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Swagger.SwaggerSchemaExampleFilter">
            <summary>
            Schema filter to add examples to request and response models in Swagger
            </summary>
        </member>
    </members>
</doc>
