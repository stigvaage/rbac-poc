<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SP.RBAC.API</name>
    </assembly>
    <members>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetAccessAssignments(System.Int32,System.Int32,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{SP.RBAC.API.Entities.AssignmentType},System.Nullable{System.Boolean},System.String)">
            <summary>
            Get all access assignments with optional filtering and pagination
            </summary>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="userId">Filter by user ID</param>
            <param name="roleId">Filter by role ID</param>
            <param name="targetSystemId">Filter by target system ID</param>
            <param name="assignmentType">Filter by assignment type</param>
            <param name="isActive">Filter by active status</param>
            <param name="search">Search in assignment reason and metadata</param>
            <returns>Paginated list of access assignments</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetAccessAssignment(System.Guid)">
            <summary>
            Get access assignment by ID
            </summary>
            <param name="id">Access assignment ID</param>
            <returns>Access assignment details</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.CreateAccessAssignment(SP.RBAC.API.DTOs.CreateAccessAssignmentDto)">
            <summary>
            Create a new access assignment
            </summary>
            <param name="dto">Access assignment creation data</param>
            <returns>Created access assignment</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.UpdateAccessAssignment(System.Guid,SP.RBAC.API.DTOs.UpdateAccessAssignmentDto)">
            <summary>
            Update an existing access assignment
            </summary>
            <param name="id">Access assignment ID</param>
            <param name="dto">Access assignment update data</param>
            <returns>Updated access assignment</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.DeleteAccessAssignment(System.Guid)">
            <summary>
            Delete an access assignment
            </summary>
            <param name="id">Access assignment ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetUserAccessAssignments(System.Guid,System.Boolean)">
            <summary>
            Get access assignments for a specific user
            </summary>
            <param name="userId">User ID</param>
            <param name="includeInactive">Include inactive assignments</param>
            <returns>List of user's access assignments</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetSystemAccessAssignments(System.Guid,System.Boolean)">
            <summary>
            Get access assignments for a specific target system
            </summary>
            <param name="targetSystemId">Target system ID</param>
            <param name="includeInactive">Include inactive assignments</param>
            <returns>List of target system's access assignments</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.GetAssignmentTypes">
            <summary>
            Get available assignment types enum values
            </summary>
            <returns>List of assignment type values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessAssignmentsController.UpdateAssignmentStatus(System.Guid,System.Boolean)">
            <summary>
            Activate/deactivate an access assignment
            </summary>
            <param name="id">Access assignment ID</param>
            <param name="isActive">Active status</param>
            <returns>Updated access assignment</returns>
        </member>
        <member name="T:SP.RBAC.API.Controllers.AccessRulesController">
            <summary>
            Administrerer tilgangsregler som definerer automatiserte sikkerhetsregler og tilgangskontroll
            </summary>
            <remarks>
            Tilgangsregler utgjør kjernen i RBAC-systemets sikkerhetshåndtering og automatiserte tilgangsstyring.
            Hver regel definerer betingelser og handlinger som utføres automatisk basert på definerte triggere.
            
            **Hovedfunksjoner:**
            - Definere automatiserte sikkerheetsregler og tilgangspolicyer
            - Konfigurere trigger-betingelser for regelaktivering
            - Administrere handlinger som utføres når regler aktiveres
            - Overvåke regelutførelse og auditere sikkerhetshendelser
            
            **Regeltyper og triggere:**
            - **OnCreate**: Aktiveres når nye entiteter eller brukere opprettes
            - **OnUpdate**: Utløses ved endringer i eksisterende data eller tilganger
            - **OnDelete**: Triggeres ved sletting eller deaktivering
            - **OnLogin**: Aktiveres ved brukerinnlogging og autentisering
            - **OnAccess**: Utløses ved forsøk på tilgang til beskyttede ressurser
            - **Scheduled**: Periodiske kjøringer basert på tidsskjema
            - **Manual**: Manuell aktivering av administratorer
            
            **Handlingstyper:**
            - **Grant**: Tildel tilgang eller rettigheter til brukere/grupper
            - **Revoke**: Fjern eksisterende tilganger og rettigheter
            - **Modify**: Modifiser eksisterende tilgangsnivåer eller scope
            - **Notify**: Send varsling til administratorer eller brukere
            - **Log**: Registrer sikkerhetshendelser for auditformål
            - **Block**: Blokker tilgang og stopp videre behandling
            - **Approve**: Krev godkjenning før handling utføres
            - **Escalate**: Eskalering til høyere sikkerhetsnivå
            
            **Prioriteringssystem:**
            - Regler kjøres i prioriteringsrekkefølge (lavest nummer først)
            - Konflikthåndtering mellom motstridende regler
            - Override-mekanismer for kritiske sikkerhetsregler
            - Fallback-handling ved regelfeil eller utilgjengelighet
            
            **Sikkerhetsaspekter:**
            - Kryptering av sensitive regelparametere og betingelser
            - Rollebasert tilgang til regeladministrasjon
            - Segregering av regeldomener etter organisasjonskontekst
            - Auditlogging av alle regelendringer og utførelser
            
            **Integrasjon og ytelse:**
            - Asynkron regelutførelse for ytelse og skalerbarhet
            - Caching av hyppig brukte regler og evalueringsresultater
            - Bulkoperasjoner for effektiv behandling av store datamengder
            - Overvåking av regelutførelse og ytelsesmetrikker
            
            **Compliance og etterlevelse:**
            - GDPR-kompatible personvernregler og databehandling
            - SOX-compliance for finansielle tilgangskontroller
            - ISO 27001 sikkerhetsstandarder og beste praksis
            - Dokumentasjon for revisjon og compliance-rapportering
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetAccessRules(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{SP.RBAC.API.Entities.TriggerType},System.Nullable{SP.RBAC.API.Entities.ActionType},System.Nullable{System.Boolean})">
            <summary>
            Hent paginerte tilgangsregler med avansert filtrering og sikkerhetskontekst
            </summary>
            <remarks>
            Returnerer en paginert liste over tilgangsregler med omfattende filtrerings- og sikkerhetskontrollmuligheter.
            Operasjonen respekterer brukerens tilgangsnivå og viser kun regler brukeren har tilgang til å se.
            
            **Filtreringsmuligheter:**
            - Integrasjonssystem: Vis regler knyttet til spesifikke eksterne systemer
            - Trigger-type: Filtrer på hvilke hendelser som aktiverer regelen
            - Handlingstype: Begrens til spesifikke handlinger (Grant, Revoke, Notify, osv.)
            - Aktivitetsstatus: Inkluder kun aktive eller inkluder deaktiverte regler
            - Fritekst søk: Søk i regelnavn og beskrivelse for rask lokalisering
            
            **Sikkerhetskontrollene:**
            - Viser kun regler brukeren har tilgang til basert på RBAC-rettigheter
            - Sensitive regelparametere filtreres ut for ikke-privilegerte brukere
            - Auditlogging av hvem som har sett på hvilke sikkerheitsregler
            - Rate limiting for å forhindre rekognosering av sikkerhetskonfigurasjoner
            
            **Sorteringslogikk:**
            - Primær: Sortert etter prioritet for å vise kritiske regler først
            - Sekundær: Alfabetisk etter navn for konsistent navigering
            - Terciary: Opprettelsesdato for kronologisk oversikt
            - Fiksert sortering sikrer forutsigbar rekkefølge ved paginering
            
            **Bruksscenarioer:**
            - Sikkerhetsdashboard for systemadministratorer
            - Compliance-rapportering og revisjonsverktøy
            - Feilsøking av tilgangsproblemer og sikkerhetsbrudd
            - Konfigurasjonsvalidering før produksjonsendringer
            
            **Ytelsesoptimalisering:**
            - Indeksering på kritiske søkekriterier og filtreringsfelt
            - Caching av hyppig brukte regeloversikter
            - Lazy loading av komplekse regelparametere og betingelser
            - Optimaliserte databasespørringer for store regelsett
            
            **Overvåking og analyse:**
            - Metrikker for regelutførelse og ytelse
            - Statistikk over regelaktivering og suksessrater
            - Trendeanalyse for sikkerhetsmønstre og anomalier
            - Dashboards for real-time sikkerhetsstatus
            </remarks>
            <param name="pageNumber">Sidenummer for paginering (starter på 1)</param>
            <param name="pageSize">Antall elementer per side (1-100)</param>
            <param name="search">Fritekst søketerm for regelnavn og beskrivelse</param>
            <param name="integrationSystemId">Filtrer etter spesifikt integrasjonssystem</param>
            <param name="triggerType">Filtrer etter trigger-type (OnCreate, OnLogin, Scheduled, osv.)</param>
            <param name="actionType">Filtrer etter handlingstype (Grant, Revoke, Notify, osv.)</param>
            <param name="isActive">Filtrer på aktivitetsstatus (true=aktive, false=inaktive, null=alle)</param>
            <returns>Paginert liste med tilgangsregler og sikkerhetskontekst</returns>
            <response code="200">Tilgangsregler hentet vellykket</response>
            <response code="400">Ugyldig forespørsel eller parametere</response>
            <response code="403">Utilstrekkelige rettigheter for å se tilgangsregler</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetAccessRule(System.Guid)">
            <summary>
            Hent en spesifikk tilgangsregel med komplette sikkerhetsdetaljer
            </summary>
            <remarks>
            Returnerer detaljert informasjon om en enkelt tilgangsregel inkludert komplett konfigurasjon og sikkerhetsparametere.
            Operasjonen validerer brukerens tilgang og logger åpning av sensitive sikkerhetskonfigurasjoner.
            
            **Inkluderte sikkerhetsdetaljer:**
            - Komplette trigger-betingelser og aktivering-kriterier
            - Detaljerte handlingskonfigurasjoner og målparametere
            - Historisk utførelsesdata og resultatlogger
            - Prioritering og konflikthåndtering med andre regler
            
            **Bruksscenarioer:**
            - Detaljert konfigurasjon og redigering av sikkerheitsregler
            - Feilsøking av tilgangsproblemer og regelaktivering
            - Compliance-dokumentasjon og revisjonsrutiner
            - Sikkerhetsevaluering og riskovurdering
            
            **Sensitiv informasjon:**
            - Detaljerte regelparametere som kan avdekke sikkerhetshull
            - Konfigurasjon av kritiske sikkerhetssystemer
            - Integrering med eksterne autentiseringstjenester
            - Logging av tilgangsmønstre og brukeradferd
            
            **Sikkerhetskontroller:**
            - Verifisering av brukerrettigheter for regellesing
            - Auditlogging av hvem som har tilgang til regeldetaljer
            - Maskering av sensitive parametere for ikke-privilegerte brukere
            - Rate limiting for å forhindre rekognosering
            
            **Ytelsesdata og metrikker:**
            - Siste utførelsestidspunkt og resultater
            - Statistikk over regelsuksess og feilrater
            - Gjennomsnittlig utførelsestid og ressursbruk
            - Trender og mønstre i regelaktivering
            
            **Integrasjonsdetaljer:**
            - Tilkobling til eksterne sikkerhetssystemer
            - API-endepunkter og autentiseringskonfigurering
            - Datasynkronisering og konsistenssjekker
            - Failover og redundanshåndtering
            </remarks>
            <param name="id">Unik identifikator for tilgangsregelen</param>
            <returns>Detaljerte sikkerhetsopplysninger om tilgangsregelen</returns>
            <response code="200">Tilgangsregel funnet og returnert</response>
            <response code="403">Utilstrekkelige rettigheter for å se regeldetaljer</response>
            <response code="404">Tilgangsregel ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.CreateAccessRule(SP.RBAC.API.DTOs.CreateAccessRuleDto)">
            <summary>
            Opprett ny tilgangsregel med avansert sikkerhetsvalidering
            </summary>
            <remarks>
            Oppretter en ny tilgangsregel med omfattende sikkerhetskontroller og validering av forretningslogikk.
            Operasjonen sikrer at regelen ikke kan skape sikkerhetshull eller motstridende tilgangskontroller.
            
            **Valideringsprosess:**
            1. Verifiserer at tilknyttet integrasjonssystem eksisterer og er aktivt
            2. Sjekker for navnekonflikter og regeloverlapp med eksisterende konfigurasjoner
            3. Validerer trigger-betingelser og handlingskonfigurasjoner for logisk konsistens
            4. Kontrollerer forretningsregler og sikkerhetskompliance-krav
            5. Tester regel-syntaks og utførelsesmuligheter uten aktivering
            
            **Sikkerhetskontroller:**
            - Validering av privilegerte handlinger (Grant/Revoke) krever høye rettigheter
            - Kritiske system-regler krever godkjenning fra flere administratorer
            - Automatisk klassifisering av regelen basert på risiko og påvirkning
            - Sanksjonssjekk mot kjendte angrepsscenarioer og sikkerhetshull
            
            **Regelkonfigurasjon:**
            - Trigger-betingelser: JSON-baserte betingelser med validering
            - Handlingsparametere: Strukturerte konfigurasjonsobjekter
            - Prioriteringshåndtering: Automatisk plassering i regelkjeden
            - Tidsbaserte regler: Cron-uttrykk for planlagte utførelser
            
            **Integrasjonshåndtering:**
            - Tilkobling til eksterne sikkerhetssystemer og identitetsleverandører
            - API-validering og autentiseringskonfigurasjon
            - Datasynkronisering og konsistenssjekker
            - Feilhåndtering og redundans-planlegging
            
            **Forretningsregler:**
            - Unike regelnavn på tvers av hele systemet
            - Konsistente trigger- og handlingskombinasjoner
            - Validering av regellogikk mot eksisterende sikkerhetspolicyer
            - Konfliktdeteksjon med eksisterende tilgangskontroller
            
            **Eksempel request:**
            ```json
            {
              "name": "EmployeeOffboardingAccessRevoke",
              "description": "Automatisk fjerning av alle tilganger ved avslutning av ansettelse",
              "triggerType": "OnUpdate",
              "actionType": "Revoke",
              "integrationSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "conditions": "{\"employeeStatus\": \"terminated\", \"department\": \"*\"}",
              "actionParameters": "{\"revokeAll\": true, \"notifyManager\": true}",
              "priority": 1,
              "isActive": false
            }
            ```
            </remarks>
            <param name="createDto">Konfigurasjon for den nye tilgangsregelen</param>
            <returns>Opprettet tilgangsregel med generert ID og sikkerhetsstatus</returns>
            <response code="201">Tilgangsregel opprettet vellykket</response>
            <response code="400">Ugyldig forespørsel eller valideringsfeil</response>
            <response code="403">Utilstrekkelige rettigheter for å opprette sikkerhetsregler</response>
            <response code="409">Navnekonflikt eller regeloverlapp med eksisterende konfigurasjon</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.UpdateAccessRule(System.Guid,SP.RBAC.API.DTOs.UpdateAccessRuleDto)">
            <summary>
            Update an existing access rule
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.DeleteAccessRule(System.Guid)">
            <summary>
            Delete an access rule (soft delete)
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.ExecuteAccessRule(System.Guid)">
            <summary>
            Utfør tilgangsregel manuelt med sikkerhetskontroller og auditlogging
            </summary>
            <remarks>
            Aktiverer en tilgangsregel manuelt med omfattende sikkerhetskontroller og detaljert auditlogging.
            Operasjonen krever privilegerte rettigheter og logger alle utførelser for compliance-formål.
            
            **Sikkerhetskontroller:**
            - Verifisering av brukerrettigheter for manuell regelutførelse
            - Validering av regelstatus og sikkerhetsnivå før aktivering
            - Kontroll av systembelastning og ressursbruk
            - Forhindre samtidig utførelse av motstridende regler
            
            **Utførelsesprosess:**
            1. Validerer at regelen er aktiv og konfigurert korrekt
            2. Sjekker for systemavhengigheter og eksterne tjenester
            3. Utfører pre-processing og betingelsesesvaluering
            4. Aktiverer regelhandlinger med transaksjonssikkerhet
            5. Verifiserer resultat og utfører post-processing
            6. Logger detaljerte auditdata og resultatmetrikker
            
            **Risikohåndtering:**
            - Dry-run modus for testing uten faktiske endringer
            - Rollback-mekanismer ved feil eller uventede resultater
            - Eskalering til systemadministratorer ved kritiske feil
            - Automatisk deaktivering ved gjentatte feilutførelser
            
            **Auditlogging:**
            - Hvem utførte regelen og når
            - Hvilke handlinger ble utført og på hvilke ressurser
            - Resultater og eventuelle feilmeldinger
            - Påvirkning på brukere og systemtilganger
            
            **Ytelseshensyn:**
            - Asynkron utførelse for tunge operasjoner
            - Rate limiting for å forhindre systemoverbelastning
            - Resource pools for effektiv behandling av bulk-operasjoner
            - Prioriteringskøer for kritiske vs. rutine-operasjoner
            
            **Compliance og sporbarhet:**
            - Detaljerte logs for SOX og GDPR compliance
            - Immutable audit trail med kryptografisk signering
            - Real-time varsling til compliance-team ved kritiske endringer
            - Rapporter for revisjon og regulatoriske krav
            </remarks>
            <param name="id">Unik identifikator for tilgangsregelen som skal utføres</param>
            <returns>Utførelsesresultat med detaljert status og auditinformasjon</returns>
            <response code="200">Tilgangsregel utført vellykket</response>
            <response code="400">Kan ikke utføre inaktiv eller ugyldig regel</response>
            <response code="403">Utilstrekkelige rettigheter for manuell regelutførelse</response>
            <response code="404">Tilgangsregel ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod under regelutførelse</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetTriggerTypes">
            <summary>
            Get available trigger types
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AccessRulesController.GetActionTypes">
            <summary>
            Hent tilgjengelige handlingstyper for tilgangsregler med kategorisering og beskrivelser
            </summary>
            <remarks>
            Returnerer en strukturert oversikt over alle tilgjengelige handlingstyper som kan konfigureres
            i tilgangsregler. Hver handlingstype inkluderer metadata om konfigurasjon, sikkerhetsnivå,
            og forventet oppførsel i ulike kontekster.
            
            **Handlingskategorier:**
            - **Grant Actions:** Tildeling av rettigheter og tilganger
            - **Revoke Actions:** Fjerning av rettigheter og tilganger  
            - **Notification Actions:** Varsling og kommunikasjon
            - **Workflow Actions:** Automatiserte arbeidsflytsteg
            - **Audit Actions:** Logging og sporingshandlinger
            - **Integration Actions:** Eksterne systeminteraksjoner
            
            **Sikkerhetsvurderinger:**
            - Risk Score: Numerisk vurdering av potensiell påvirkning (1-10)
            - Required Permissions: Nødvendige rettigheter for utførelse
            - Approval Requirements: Krav til godkjenning før aktivering
            - Reversibility: Mulighet for å reversere handlingen
            
            **Konfigurasjonsmetadata:**
            - Påkrevde parametere og deres datatyper
            - Valgfrie konfigurasjonsinnstillinger
            - Validerings- og formatregler
            - Eksempelkonfigurasjoner for vanlige brukstilfeller
            
            **Integrasjonsstøtte:**
            - Eksterne API-endepunkter og protokoller
            - Timeout-innstillinger og retry-logikk
            - Error handling og fallback-strategier
            - Rate limiting og throttling-konfigurasjon
            
            **Brukseksempler:**
            - GrantAccess: Tildele tilgang til spesifikke ressurser
            - RevokeAccess: Fjerne tilgang basert på betingelser
            - SendNotification: Sende varsler til brukere eller administratorer
            - UpdateProperty: Oppdatere egenskaper på entiteter
            - CreateAuditLog: Generere detaljerte auditlogger
            - TriggerWorkflow: Starte automatiserte arbeidsprosesser
            
            **Ytelse og skalerbarhet:**
            - Asynkrone vs. synkrone handlinger
            - Batch-processing muligheter
            - Resource consumption estimates
            - Concurrent execution limitations
            </remarks>
            <returns>Liste over alle tilgjengelige handlingstyper med metadata og konfigurasjonsinformasjon</returns>
            <response code="200">Handlingstyper hentet vellykket</response>
            <response code="500">Intern serverfeil oppstod under henting av handlingstyper</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetEntityHistory(System.String,System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get audit history for a specific entity
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetUserActivity(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get audit activity for a specific user
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.Search(SP.RBAC.API.DTOs.AuditSearchRequest,System.Threading.CancellationToken)">
            <summary>
            Search audit logs with advanced filtering
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetComplianceReport(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Threading.CancellationToken)">
            <summary>
            Get compliance report summary
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.AuditController.GetActivitySummary(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Get activity summary for dashboard
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.EntityDefinitionsController">
            <summary>
            Administrerer entitetsdefinisjoner som definerer struktur og metadata for dataentiteter fra eksterne systemer
            </summary>
            <remarks>
            Entitetsdefinisjoner representerer strukturen og metadataene for dataentiteter importert fra eksterne systemer.
            Hver entitetsdefinisjon tilhører et integrasjonssystem og definerer skjemaet for entitetsinstanser.
            
            **Hovedfunksjoner:**
            - Definere entiteter fra eksterne systemer (HR-ansatte, EMR-pasienter, CRM-kontakter)
            - Konfigurere entitetsmetadata inkludert tabellnavn og primærnøkkelfelt
            - Administrere hierarkiske relasjoner mellom entiteter
            - Støtte for tilpasset sortering og visningsinnstillinger
            - Fleksibel metadata-lagring for systemspesifikke konfigurasjoner
            
            **Vanlige brukstilfeller:**
            - Definere "Ansatt"-entitet fra HR-system med tabellmapping
            - Konfigurere "Pasient"-entitet fra EMR-system med personverninnstillinger
            - Sette opp "Kunde"-entitet fra CRM-system med relasjonsmapping
            - Etablere entitetshierarkier for organisasjonsstrukturer
            
            **Eksempelforespørsler:**
            ```json
            POST /api/entitydefinitions
            {
              "integrationSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Employee",
              "displayName": "Employee Records",
              "description": "Employee entity from HR system",
              "tableName": "Employees",
              "primaryKeyField": "EmployeeId",
              "isActive": true,
              "sortOrder": 1,
              "metadata": "{\"syncFrequency\": \"daily\", \"batchSize\": 500}"
            }
            ```
            
            **Response Structure:**
            All responses include comprehensive entity metadata with integration system details,
            property definition counts, and entity instance counts for resource planning.
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.GetEntityDefinitions(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{System.Boolean})">
            <summary>
            Retrieve all entity definitions with advanced filtering and pagination
            </summary>
            <remarks>
            Returns a paginated list of entity definitions with comprehensive filtering options.
            Results include integration system details, property definition counts, and entity instance counts.
            
            **Filter Options:**
            - **search**: Filter by name, display name, or description (case-insensitive partial match)
            - **integrationSystemId**: Filter by specific integration system
            - **isActive**: Filter by active/inactive status
            
            **Sorting**: Results are ordered by sort order (ascending), then by name (ascending)
            
            **Example Usage:**
            - `GET /api/entitydefinitions?search=employee&amp;isActive=true&amp;pageSize=20`
            - `GET /api/entitydefinitions?integrationSystemId=123e4567-e89b-12d3-a456-426614174000`
            
            **Performance Notes:**
            - Includes related data (integration system, property definitions count, entity instances count)
            - Large datasets are automatically paginated for optimal performance
            - Consider using smaller page sizes for systems with many entity definitions
            </remarks>
            <param name="pageNumber">Page number for pagination (default: 1, minimum: 1)</param>
            <param name="pageSize">Number of items per page (default: 10, maximum: 100)</param>
            <param name="search">Optional search term to filter by name, display name, or description</param>
            <param name="integrationSystemId">Optional filter by integration system ID</param>
            <param name="isActive">Optional filter by active status (true/false)</param>
            <returns>Paginated list of entity definitions with metadata and related counts</returns>
            <response code="200">Successfully retrieved entity definitions</response>
            <response code="400">Invalid pagination parameters or filter values</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.GetEntityDefinition(System.Guid)">
            <summary>
            Retrieve a specific entity definition by its unique identifier
            </summary>
            <remarks>
            Returns detailed information about a single entity definition including:
            - Complete entity metadata and configuration
            - Integration system details and connection info
            - Count of associated property definitions
            - Count of entity instances using this definition
            
            **Use Cases:**
            - View complete entity configuration before modification
            - Validate entity structure before creating instances
            - Check property definition and instance counts for capacity planning
            - Retrieve entity metadata for custom integration workflows
            
            **Example Response Data:**
            The response includes comprehensive entity metadata, integration system details,
            and related counts to support administrative and operational decisions.
            </remarks>
            <param name="id">Unique identifier of the entity definition</param>
            <returns>Complete entity definition with related data and counts</returns>
            <response code="200">Successfully retrieved entity definition</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.CreateEntityDefinition(SP.RBAC.API.DTOs.CreateEntityDefinitionDto)">
            <summary>
            Create a new entity definition for an integration system
            </summary>
            <remarks>
            Creates a new entity definition that defines the structure for data entities from external systems.
            The entity definition serves as a template for creating entity instances.
            
            **Prerequisites:**
            - Integration system must exist and be active
            - Entity name must be unique within the integration system
            - Table name should match the external system's table/collection name
            - Primary key field should match the external system's identifier field
            
            **Validation Rules:**
            - Integration system ID must reference an existing integration system
            - Entity name must be unique within the specified integration system
            - Required fields: name, displayName, tableName, primaryKeyField
            - Sort order defaults to 0 if not specified
            - IsActive defaults to true if not specified
            
            **Best Practices:**
            - Use descriptive display names for user interfaces
            - Include comprehensive descriptions for documentation
            - Set appropriate sort orders for logical grouping
            - Use metadata field for system-specific configurations
            
            **Example Request:**
            ```json
            {
              "integrationSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Employee",
              "displayName": "Employee Records",
              "description": "Employee entity from HR system with full profile data",
              "tableName": "Employees",
              "primaryKeyField": "EmployeeId",
              "isActive": true,
              "sortOrder": 1,
              "metadata": "{\"syncFrequency\": \"daily\", \"includeArchived\": false}"
            }
            ```
            </remarks>
            <param name="createDto">Entity definition data for creation</param>
            <returns>Created entity definition with generated ID and metadata</returns>
            <response code="201">Entity definition created successfully</response>
            <response code="400">Invalid request data or integration system not found</response>
            <response code="409">Entity definition with the same name already exists in the integration system</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.UpdateEntityDefinition(System.Guid,SP.RBAC.API.DTOs.UpdateEntityDefinitionDto)">
            <summary>
            Update an existing entity definition with new configuration
            </summary>
            <remarks>
            Updates an existing entity definition with new metadata, configuration, or structural changes.
            Supports partial updates while maintaining data integrity and referential constraints.
            
            **Update Capabilities:**
            - Modify entity metadata (name, display name, description)
            - Change integration system assignment (with validation)
            - Update table mapping and primary key field configuration
            - Adjust sort order and active status
            - Update custom metadata and system-specific settings
            
            **Validation and Constraints:**
            - Integration system must exist and be accessible
            - New entity name must be unique within target integration system
            - Cannot change integration system if entity instances exist (contact support)
            - Last modified reason is recommended for audit trail
            
            **Impact Assessment:**
            - Changing integration system may affect existing property definitions
            - Modifying table name or primary key field may impact sync processes
            - Deactivating entity definition stops new instance creation
            
            **Example Request:**
            ```json
            {
              "integrationSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Employee_Updated",
              "displayName": "Employee Records - Enhanced",
              "description": "Enhanced employee entity with additional metadata fields",
              "tableName": "Employees_v2",
              "primaryKeyField": "EmployeeGUID",
              "isActive": true,
              "sortOrder": 2,
              "metadata": "{\"syncFrequency\": \"hourly\", \"includePhotos\": true}",
              "lastModifiedReason": "Updated to support new HR system version"
            }
            ```
            </remarks>
            <param name="id">Unique identifier of the entity definition to update</param>
            <param name="updateDto">Updated entity definition data</param>
            <returns>Updated entity definition with new configuration</returns>
            <response code="200">Entity definition updated successfully</response>
            <response code="400">Invalid request data or integration system not found</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="409">Entity definition with the same name already exists in the target integration system</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.DeleteEntityDefinition(System.Guid)">
            <summary>
            Delete an entity definition (soft delete with dependency validation)
            </summary>
            <remarks>
            Performs a soft delete of an entity definition after validating that no dependent data exists.
            This operation marks the entity definition as deleted without physically removing it from the database.
            
            **Deletion Process:**
            1. Validates that no entity instances reference this definition
            2. Checks for dependent property definitions (automatically handled)
            3. Performs soft delete by setting deletion flags and timestamp
            4. Preserves audit trail and referential data for compliance
            
            **Dependency Validation:**
            - Cannot delete if entity instances exist using this definition
            - Property definitions are automatically handled during deletion
            - Access rules and assignments may need manual cleanup
            
            **Recovery Options:**
            - Soft-deleted entity definitions can be restored by administrators
            - All related metadata and configuration is preserved
            - Recovery process requires database-level access
            
            **Alternative Actions:**
            - Consider deactivating instead of deleting for temporary removal
            - Use archive workflows for long-term data retention
            - Contact support for complex dependency resolution
            
            **Impact Assessment:**
            - Stops all new entity instance creation
            - Existing entity instances remain unaffected
            - Integration sync processes may need reconfiguration
            - Reports and analytics may need filter updates
            </remarks>
            <param name="id">Unique identifier of the entity definition to delete</param>
            <returns>No content on successful deletion</returns>
            <response code="204">Entity definition deleted successfully</response>
            <response code="400">Cannot delete entity definition with existing entity instances</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityDefinitionsController.GetPropertyDefinitions(System.Guid)">
            <summary>
            Retrieve all property definitions for a specific entity definition
            </summary>
            <remarks>
            Returns a complete list of property definitions that define the structure and metadata
            for individual fields within entity instances of this entity definition.
            
            **Property Definition Details:**
            - Field names, display names, and descriptions
            - Data types and validation rules
            - Index and uniqueness constraints
            - UI metadata and display preferences
            - Source field mappings from external systems
            
            **Use Cases:**
            - View complete entity schema before creating instances
            - Validate property configurations for data import
            - Generate dynamic forms and user interfaces
            - Configure field-level access controls and permissions
            - Plan data migration and transformation workflows
            
            **Sorting and Organization:**
            - Results are ordered by sort order (ascending), then by name (ascending)
            - Property definitions maintain hierarchical structure information
            - Related entity definitions included for context
            
            **Performance Considerations:**
            - Includes complete property metadata for UI generation
            - Entity definition validation occurs before property retrieval
            - Consider caching for frequently accessed entity structures
            
            **Integration Notes:**
            - Property definitions map to external system field structures
            - Source field mappings enable automated data synchronization
            - UI metadata supports custom form generation and validation
            </remarks>
            <param name="id">Unique identifier of the entity definition</param>
            <returns>Complete list of property definitions for the entity definition</returns>
            <response code="200">Successfully retrieved property definitions</response>
            <response code="404">Entity definition not found with the specified ID</response>
            <response code="500">Internal server error occurred</response>
        </member>
        <member name="T:SP.RBAC.API.Controllers.EntityInstancesController">
            <summary>
            Administrerer entitetsinstanser som representerer faktiske dataobjekter fra eksterne systemer
            </summary>
            <remarks>
            Entitetsinstanser er konkrete implementasjoner av entitetsdefinisjoner med faktiske dataverdier
            fra eksterne systemer. Hver instans representerer en spesifikk oppføring som en ansatt,
            pasient, kunde eller annet dataobjekt definert i tilhørende entitetsdefinisjon.
            
            **Hovedfunksjoner:**
            - Administrere livssyklusen til entitetsinstanser fra opprettelse til sletting
            - Synkronisere data mellom eksterne systemer og RBAC-plattformen
            - Håndtere entitetsrelasjoner og referanseintegritet
            - Spore endringer og opprettholde revisjonsspor
            - Validere datainnhold mot entitetsdefinisjoner
            
            **Datasynkronisering:**
            - Automatisk import av data fra eksterne systemer
            - Konfliktløsning ved samtidige oppdateringer
            - Delta-synkronisering for optimal ytelse
            - Feilhåndtering og retry-mekanismer
            - Planlagt og triggeret synkronisering
            
            **Relasjonshåndtering:**
            - Hierarkiske relasjoner (forelder-barn strukturer)
            - Kryssreferanser mellom entiteter fra ulike systemer
            - Referanseintegritet og orphan detection
            - Bulk-operasjoner for relaterte entiteter
            
            **Ytelse og skalerbarhet:**
            - Optimaliserte spørringer med indeksering
            - Lazy loading av relaterte data
            - Batch-processing for bulk-operasjoner
            - Caching av hyppig tilgåtte data
            
            **Audit og compliance:**
            - Detaljert logging av alle endringer
            - Historikk-sporing med tidsstempler
            - Data lineage og kildesporing
            - GDPR og personvernkompatibilitet
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.GetEntityInstances(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{System.Boolean},System.Nullable{SP.RBAC.API.Entities.SyncStatus})">
            <summary>
            Get all entity instances with pagination
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.GetEntityInstance(System.Guid)">
            <summary>
            Get a specific entity instance by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.CreateEntityInstance(SP.RBAC.API.DTOs.CreateEntityInstanceDto)">
            <summary>
            Create a new entity instance
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.UpdateEntityInstance(System.Guid,SP.RBAC.API.DTOs.UpdateEntityInstanceDto)">
            <summary>
            Update an existing entity instance
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.EntityInstancesController.DeleteEntityInstance(System.Guid)">
            <summary>
            Delete an entity instance (soft delete)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.IntegrationDocumentController">
            <summary>
            Controller for managing integration documentation and diagrams
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetIntegrationDocuments(SP.RBAC.API.DTOs.IntegrationDocumentSearchRequest)">
            <summary>
            Gets all integration documents with optional filtering
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetIntegrationDocument(System.Guid)">
            <summary>
            Gets a specific integration document by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.CreateIntegrationDocument(SP.RBAC.API.DTOs.CreateIntegrationDocumentRequest)">
            <summary>
            Creates a new integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.UpdateIntegrationDocument(System.Guid,SP.RBAC.API.DTOs.UpdateIntegrationDocumentRequest)">
            <summary>
            Updates an existing integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.DeactivateIntegrationDocument(System.Guid)">
            <summary>
            Deactivates an integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.ActivateIntegrationDocument(System.Guid)">
            <summary>
            Reactivates a deactivated integration document
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetDocumentsBySystem(System.Guid)">
            <summary>
            Gets all documents for a specific integration system
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetDocumentHistory(System.Guid)">
            <summary>
            Gets document version history
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.GetDocumentStatistics">
            <summary>
            Gets document statistics by type
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationDocumentController.SearchDocuments(SP.RBAC.API.DTOs.DocumentSearchRequest)">
            <summary>
            Searches documents by content
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.IntegrationMappingController">
            <summary>
            Controller for managing integration mappings between external systems and internal properties
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetIntegrationMappings(SP.RBAC.API.DTOs.IntegrationMappingSearchRequest)">
            <summary>
            Gets all integration mappings with optional filtering
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetIntegrationMapping(System.Guid)">
            <summary>
            Gets a specific integration mapping by ID
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.CreateIntegrationMapping(SP.RBAC.API.DTOs.CreateIntegrationMappingRequest)">
            <summary>
            Creates a new integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.UpdateIntegrationMapping(System.Guid,SP.RBAC.API.DTOs.UpdateIntegrationMappingRequest)">
            <summary>
            Updates an existing integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.DeactivateIntegrationMapping(System.Guid)">
            <summary>
            Deactivates an integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.ActivateIntegrationMapping(System.Guid)">
            <summary>
            Reactivates a deactivated integration mapping
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetIntegrationMappingStatistics">
            <summary>
            Gets integration mapping statistics
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationMappingController.GetMappingsBySystem(System.Guid)">
            <summary>
            Gets integration mappings for a specific system
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.IntegrationSystemsController">
            <summary>
            Administrerer integrasjonssystemer som kobler eksterne systemer til RBAC-plattformen
            </summary>
            <remarks>
            Integrasjonssystemer representerer eksterne datakilder som HR-systemer, EMR-systemer,
            Active Directory og andre enterprise-applikasjoner. Denne kontrolleren gir omfattende
            CRUD-operasjoner samt avanserte funksjoner for tilkoblingstesting, systemovervåking og bulk-operasjoner.
            
            **Hovedfunksjoner:**
            - Administrere eksterne systemtilkoblinger og konfigurasjoner
            - Teste tilkoblinger og overvåke systemhelse
            - Konfigurere autentiseringsinformasjon og sikkerhetsinnstillinger
            - Håndtere systemmetadata og integrasjonsparametere
            - Massoperasjoner for effektiv systemadministrasjon
            
            **Støttede systemtyper:**
            - HR-systemer (ansattdata, organisasjonsstrukturer)
            - EMR/EHR-systemer (pasientdata, klinisk informasjon)
            - CRM-systemer (kundedata, salgsrelasjoner)
            - Active Directory (brukerautentisering, gruppemedlemskap)
            - Enterprise Resource Planning (ERP) systemer
            - Egendefinerte API-er og databaser
            
            **Sikkerhetsaspekter:**
            - Kryptert lagring av tilkoblingsinformasjon og credentials
            - Sikker kommunikasjon med eksterne systemer via HTTPS/TLS
            - Regelmessig validering av tilkoblinger og certificates
            - Audit-logging av alle system-interaksjoner
            - Rate limiting og throttling for å forhindre overbelastning
            
            Alle operasjoner støtter paginering, filtrering og omfattende feilhåndtering.
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.GetIntegrationSystems(System.Int32,System.Int32,System.String,System.Nullable{System.Boolean})">
            <summary>
            Retrieves a paginated list of integration systems with optional filtering
            </summary>
            <remarks>
            This endpoint supports comprehensive filtering and searching across integration systems.
            Use the search parameter to find systems by name, display name, or description.
            The isActive filter allows you to retrieve only active or inactive systems.
            
            Sample request:
            
                GET /api/IntegrationSystems?pageNumber=1&amp;pageSize=10&amp;search=HR&amp;isActive=true
            
            This will return the first 10 active systems that contain "HR" in their name, 
            display name, or description.
            </remarks>
            <param name="pageNumber">Page number for pagination (default: 1, minimum: 1)</param>
            <param name="pageSize">Number of items per page (default: 10, range: 1-100)</param>
            <param name="search">Optional search term to filter by name, display name, or description</param>
            <param name="isActive">Optional filter to show only active (true) or inactive (false) systems</param>
            <returns>A paginated list of integration systems matching the specified criteria</returns>
            <response code="200">Returns the paginated list of integration systems</response>
            <response code="400">If the pagination parameters are invalid</response>
            <response code="500">If an internal server error occurs</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.GetIntegrationSystem(System.Guid)">
            <summary>
            Retrieves a specific integration system by its unique identifier
            </summary>
            <remarks>
            This endpoint returns detailed information about a single integration system,
            including all configuration details, authentication settings, and metadata.
            
            Sample request:
            
                GET /api/IntegrationSystems/123e4567-e89b-12d3-a456-426614174000
            
            The response includes sensitive information like connection strings, so ensure
            proper authentication and authorization are in place for production use.
            </remarks>
            <param name="id">The unique identifier (GUID) of the integration system</param>
            <returns>The integration system with the specified ID</returns>
            <response code="200">Returns the integration system details</response>
            <response code="404">If no integration system exists with the specified ID</response>
            <response code="500">If an internal server error occurs</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.CreateIntegrationSystem(SP.RBAC.API.DTOs.CreateIntegrationSystemDto)">
            <summary>
            Create a new integration system
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.UpdateIntegrationSystem(System.Guid,SP.RBAC.API.DTOs.UpdateIntegrationSystemDto)">
            <summary>
            Update an existing integration system
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.DeleteIntegrationSystem(System.Guid)">
            <summary>
            Delete an integration system (soft delete)
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Controllers.IntegrationSystemsController.TestConnection(System.Guid)">
            <summary>
            Test connection to an integration system
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Controllers.PropertyDefinitionsController">
            <summary>
            Administrerer egenskapsdefinisjonene som definerer datastrukturer og validering for entiteter
            </summary>
            <remarks>
            Egenskapsdefinisjonene utgjør fundamentet for datamodellering og strukturering i RBAC-systemet.
            Hver definisjon spesifiserer hvordan data skal struktureres, valideres og presenteres.
            
            **Hovedfunksjoner:**
            - Definere datatyper og valideringsregler for entitetsegenskaper
            - Konfigurere visningslogikk og brukergrensesnitt-parametere
            - Administrere obligatoriske felt og unike restriksjoner
            - Etablere datakonsistens på tvers av systemintegrasjoner
            
            **Datatyper støttet:**
            - String: Tekstdata med lengdebegrensninger og mønstre
            - Integer: Heltall med verdiområde-validering
            - Decimal: Desimaltall for presise beregninger
            - Boolean: Sann/usann verdier for tilstand og flagg
            - DateTime: Tids- og datostempel med timezone-håndtering
            - Guid: Universelle unike identifikatorer
            - Email: E-postadresser med format-validering
            - Phone: Telefonnummer med lands- og formatstøtte
            - Url: Web-adresser med protokoll-validering
            - Json: Strukturerte JSON-objekter for komplekse data
            
            **Valideringsalternativer:**
            - Obligatoriske felt (required) med tilpassede feilmeldinger
            - Unike verdier (unique) med konfliktløsning
            - Verdiområder (range) for numeriske og datofelt
            - Regulære uttrykk (regex) for mønstervalidering
            - Tilpassede valideringsregler med forretningslogikk
            
            **Integrasjonsscenarioer:**
            - Ekstern systemmapping via IntegrationMapping-entiteter
            - API-responsskjema for konsistente datastrukturer
            - Brukergrensesnitt-generering basert på metadata
            - Rapportkolonner og filtreringsparametere
            
            **Sikkerhet og etterlevelse:**
            - Datakategorisering for personvern (GDPR-merking)
            - Krypteringskrav for sensitive datatyper
            - Auditlogging av alle strukturelle endringer
            - Tilgangskontroll basert på datakategori
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.GetPropertyDefinitions(System.Int32,System.Int32,System.String,System.Nullable{System.Guid},System.Nullable{SP.RBAC.API.Entities.DataType})">
            <summary>
            Hent paginerte egenskapsdefinisjonene med filtrering og søk
            </summary>
            <remarks>
            Returnerer en paginert liste over egenskapsdefinisjonene med avanserte filtrerings- og søkemuligheter.
            Støtter søk på tvers av navn, visningsnavn og beskrivelse for effektiv navigering.
            
            **Filtreringsmuligheter:**
            - Entitetsdefinisjon: Filtrer egenskaper tilhørende spesifikke entiteter
            - Datatype: Begrens resultater til bestemte datatyper
            - Fritekst søk: Søk i navn, visningsnavn og beskrivelse
            - Aktive/inaktive: Inkluder eller ekskluder slettet/deaktiverte egenskaper
            
            **Sorteringslogikk:**
            - Primær: Sortert etter SortOrder for logisk gruppering
            - Sekundær: Alfabetisk etter navn for konsistent presentasjon
            - Stabil sortering sikrer forutsigbar rekkefølge på tvers av sider
            
            **Bruksscenarioer:**
            - Administrasjonsgrensesnitt for systemkonfigurasjon
            - API-dokumentasjon og skjemavalidering
            - Integrasjonsmapping og datafelt-utforskning
            - Rapportkolonne-utvalg og filterkonfigurasjon
            
            **Ytelsesoptimalisering:**
            - Effektiv indeksering på søkekriterier
            - Lazy loading av relasjonelle data
            - Caching av hyppig brukte egenskapsgrupper
            
            **Paginering:**
            - Minimums sidestørrelse: 1, maksimum: 100
            - Standard sidestørrelse: 10 for optimal brukervennlighet
            - Totalt antall for progressindikatorer
            </remarks>
            <param name="pageNumber">Sidenummer for paginering (starter på 1)</param>
            <param name="pageSize">Antall elementer per side (1-100)</param>
            <param name="search">Fritekst søketerm for navn, visningsnavn og beskrivelse</param>
            <param name="entityDefinitionId">Filtrer etter spesifikk entitetsdefinisjon</param>
            <param name="dataType">Filtrer etter datatype (String, Integer, Boolean, osv.)</param>
            <returns>Paginert liste med egenskapsdefinisjonene og metadata</returns>
            <response code="200">Egenskapsdefinisjonene hentet vellykket</response>
            <response code="400">Ugyldig forespørsel eller parametere</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.GetPropertyDefinition(System.Guid)">
            <summary>
            Hent en spesifikk egenskapsdefinisjon med komplette detaljer
            </summary>
            <remarks>
            Returnerer detaljert informasjon om en enkelt egenskapsdefinisjon inkludert:
            - Fullstendige metadata og konfigurasjonsparametere
            - Tilknyttet entitetsdefinisjon med kontekstuell informasjon
            - Valideringsregler og forretningslogikk-konfigurasjoner
            - Integrasjonsmapping og eksterne systemreferanser
            
            **Bruksscenarioer:**
            - Detaljert konfigurasjon og redigering av egenskaper
            - Validering av datastruktur før integrasjonsopprettelse
            - Analyse av egenskapsavhengigheter og dataflyt
            - Generering av brukergrensesnitt-komponenter
            
            **Inkluderte data:**
            - Grunnleggende metadata: Navn, visningsnavn, beskrivelse
            - Tekniske parametere: Datatype, validering, unike restriksjoner
            - Presentasjonslogikk: Sorteringsrekkefølge, visningsregler
            - Relasjonsdata: Tilknyttet entitetsdefinisjon og organisasjon
            
            **Valideringsdata:**
            - Min/maks verdier for numeriske og datofelt
            - Påkrevd/valgfri status med tilpassede feilmeldinger
            - Regulære uttrykk for mønstervalidering
            - Tilpassede forretningsregler og integritetssjekker
            
            **Integrasjonsrelevans:**
            - Mapping til eksterne systemfelt og datakilder
            - API-skjemavalidering for inngående data
            - Datatransformasjon og formatkonvertering
            - Sikkerhetskategorisering for databeskyttelse
            </remarks>
            <param name="id">Unik identifikator for egenskapsdefinisjon</param>
            <returns>Detaljerte opplysninger om egenskapsdefinisjon</returns>
            <response code="200">Egenskapsdefinisjon funnet og returnert</response>
            <response code="404">Egenskapsdefinisjon ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.CreatePropertyDefinition(SP.RBAC.API.DTOs.CreatePropertyDefinitionDto)">
            <summary>
            Opprett ny egenskapsdefinisjon med validering og konsistenssjekking
            </summary>
            <remarks>
            Oppretter en ny egenskapsdefinisjon med omfattende validering av dataintegritet og forretningsregler.
            Sikrer konsistens på tvers av entitetsdefinisjoner og forhindrer navnekonflikter.
            
            **Valideringsprosess:**
            1. Verifiserer at tilknyttet entitetsdefinisjon eksisterer og er aktiv
            2. Sjekker for navnekonflikter innenfor samme entitet
            3. Validerer datatype-kompatibilitet med eksisterende systemer
            4. Kontrollerer forretningsregler og integritetsbestemmelser
            5. Tester valideringsregler for syntaks og utførbarhet
            
            **Datatypehåndtering:**
            - String: Automatisk trimming og lengdevalidering
            - Numeriske: Verifikasjoner av verdiområder og presisjon
            - DateTime: Timezone-håndtering og formatstandarder
            - Email/Phone/Url: Formatvalidering og standardisering
            - JSON: Skjemavalidering og strukturell integritet
            
            **Automatisk konfigurasjon:**
            - Standard valideringsregler basert på datatype
            - Anbefalt visningslogikk og sorteringsrekkefølge
            - Sikkerhetskategorisering basert på navnmønstre
            - Integrasjonsmapping-forslag for kjente systemtyper
            
            **Forretningsregler:**
            - Unike navn innenfor samme entitetsdefinisjon
            - Konsistente datatyper for like egenskaper på tvers av entiteter
            - Påkrevd-flagg kan ikke endres hvis eksisterende data mangler verdier
            - Valideringsregler må være testbare og deterministiske
            
            **Eksempel request:**
            ```json
            {
              "entityDefinitionId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "Email",
              "displayName": "E-postadresse",
              "description": "Brukerens primære e-postadresse for kommunikasjon",
              "dataType": "Email",
              "isRequired": true,
              "isUnique": true,
              "validationRule": "^[\\w\\.-]+@[\\w\\.-]+\\.[a-zA-Z]{2,}$",
              "sortOrder": 10
            }
            ```
            </remarks>
            <param name="createDto">Konfigurasjon for den nye egenskapsdefinisjon</param>
            <returns>Opprettet egenskapsdefinisjon med generert ID</returns>
            <response code="201">Egenskapsdefinisjon opprettet vellykket</response>
            <response code="400">Ugyldig forespørsel eller valideringsfeil</response>
            <response code="409">Navnekonflikt - egenskapsnavn eksisterer allerede i entiteten</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.UpdatePropertyDefinition(System.Guid,SP.RBAC.API.DTOs.UpdatePropertyDefinitionDto)">
            <summary>
            Oppdater eksisterende egenskapsdefinisjon med endringssporing
            </summary>
            <remarks>
            Oppdaterer en eksisterende egenskapsdefinisjon med omfattende validering og påvirkningsanalyse.
            Endringer spores og valideres mot eksisterende data og systemavhengigheter.
            
            **Oppdateringsmuligheter:**
            - Visningsmetadata: Navn, visningsnavn, beskrivelse
            - Valideringsregler: Påkrevd-status, unike restriksjoner, custom validering
            - Presentasjonslogikk: Sorteringsrekkefølge, grupperingsregler
            - Sikkerhetskategorisering: Databeskyttelse og tilgangsnivåer
            
            **Begrensninger og sikkerhetstiltak:**
            - Datatype kan ikke endres hvis eksisterende egenskapsverdier finnes
            - Påkrevd-flagg kan ikke aktiveres hvis eksisterende data har NULL-verdier
            - Unike restriksjoner valideres mot all eksisterende data
            - Valideringsregler testes mot eksisterende verdier før aktivering
            
            **Påvirkningsanalyse:**
            - Endring av påkrevd-status påvirker dataintegritetssjekker
            - Modifikasjon av valideringsregler kan gjøre eksisterende data ugyldig
            - Navneendringer krever oppdatering av integrasjonsmappinger
            - Sorteringsrekkefølge-endringer påvirker brukergrensesnitt-layout
            
            **Endringssporing:**
            - Automatisk versjonshåndtering for hver endring
            - Detaljert auditlogging av hvem, hva og hvorfor
            - Rollback-muligheter for kritiske systemfeil
            - Varslinger til avhengige systemer ved strukturelle endringer
            
            **Validering av eksisterende data:**
            - Sjekk om nye valideringsregler er kompatible med eksisterende verdier
            - Automatisk datamigreringsforslag ved inkompatibilitet
            - Advarsler om potensielle dataintegritetsbrudd
            - Mulighet for gradvis utrulling av endringer
            
            **Eksempel request:**
            ```json
            {
              "entityDefinitionId": "123e4567-e89b-12d3-a456-426614174000",
              "name": "EmailAddress",
              "displayName": "E-postadresse (Primær)",
              "description": "Brukerens primære e-postadresse for all kommunikasjon og varsling",
              "dataType": "Email",
              "isRequired": true,
              "isUnique": true,
              "validationRule": "^[\\w\\.-]+@[\\w\\.-]+\\.[a-zA-Z]{2,}$",
              "sortOrder": 5,
              "lastModifiedReason": "Oppdatert visningsnavn for bedre brukervennlighet"
            }
            ```
            </remarks>
            <param name="id">Unik identifikator for egenskapsdefinisjon som skal oppdateres</param>
            <param name="updateDto">Oppdateringsinformasjon for egenskapsdefinisjon</param>
            <returns>Oppdatert egenskapsdefinisjon med endringer</returns>
            <response code="200">Egenskapsdefinisjon oppdatert vellykket</response>
            <response code="400">Ugyldig forespørsel eller valideringsfeil</response>
            <response code="404">Egenskapsdefinisjon ikke funnet med angitt ID</response>
            <response code="409">Navnekonflikt eller dataintegritetsbrudd</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.DeletePropertyDefinition(System.Guid)">
            <summary>
            Deaktiver egenskapsdefinisjon (myk sletting med avhengighetsvalidering)
            </summary>
            <remarks>
            Utfører myk deaktivering av en egenskapsdefinisjon etter grundig validering av systemavhengigheter.
            Operasjonen bevarer alle historiske data while markerer egenskapen som utilgjengelig for nye bruksområder.
            
            **Deaktiveringsprosess:**
            1. Validerer at ingen kritiske systemkomponenter er avhengige av egenskapen
            2. Sjekker for eksisterende egenskapsverdier som må bevares
            3. Identifiserer integrasjonsmappinger som påvirkes av endringen
            4. Markerer som slettet med timestamp og årsaksregistrering
            5. Opprettholder alle historiske verdier for auditformål
            
            **Avhengighetsvalidering:**
            - Eksisterende PropertyValues: Kan ikke slettes hvis data finnes
            - IntegrationMappings: Må oppdateres eller deaktiveres først
            - API-skjemaer: Valider at eksterne systemer ikke er kritisk avhengige
            - Brukergrensesnitt: Sjekk for hardkodede referanser til egenskapen
            - Rapporter og analyser: Identifiser hvor egenskapen er i bruk
            
            **Datasikkerhet og etterlevelse:**
            - Alle eksisterende egenskapsverdier bevares for auditformål
            - Slettingsoperasjonen logges med brukeridentitet og tidsstempel
            - GDPR-kompatibel deaktivering med mulighet for ekte sletting senere
            - Backup-rutiner sikrer gjenoppretting ved feilaktig sletting
            
            **Gjenopprettingsmuligheter:**
            - Myk sletting tillater reaktivering av egenskapsdefinisjon
            - Alle konfigurasjoner og metadata bevares for rask gjenoppretting
            - Integrasjonsmappinger kan gjenaktiveres uten dataintegritetsbrudd
            - Versionshistorikk opprettholdes for kompletts sporbarhet
            
            **Alternative løsninger:**
            - Vurder å markere som "deprecated" i stedet for sletting
            - Bruk "IsActive" flagg for midlertidig deaktivering
            - Kontakt systemadministrator for komplekse avhengighetsløsninger
            - Planlegg sletting som del av større dataopprydning
            
            **Påvirkningsanalyse:**
            - Stopper all ny dataregistrering for denne egenskapen
            - Eksisterende data forblir tilgjengelig for lesing og rapporter
            - Integrasjoner kan feile hvis de forventer egenskapen
            - Brukergrensesnitt må oppdateres for å håndtere missing egenskaper
            </remarks>
            <param name="id">Unik identifikator for egenskapsdefinisjon som skal deaktiveres</param>
            <returns>Ingen innhold ved vellykket deaktivering</returns>
            <response code="204">Egenskapsdefinisjon deaktivert vellykket</response>
            <response code="400">Kan ikke deaktivere egenskap med aktive avhengigheter</response>
            <response code="404">Egenskapsdefinisjon ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyDefinitionsController.GetDataTypes">
            <summary>
            Hent tilgjengelige datatyper for egenskapsdefinisjonene
            </summary>
            <remarks>
            Returnerer en komplett liste over alle støttede datatyper som kan brukes ved opprettelse av egenskapsdefinisjonene.
            Hver datatype inkluderer metadata om valideringsregler og formatstandarder.
            
            **Støttede datatyper:**
            - **String**: Tekstdata med konfigurerbare lengdebegrensninger
              - Støtter UTF-8 og internasjonale tegnsett
              - Automatisk trimming av whitespace
              - Regex-basert mønstervalidering
            
            - **Integer**: Heltallsverdier med verdiområde-kontroll
              - 32-bit eller 64-bit støtte avhengig av konfigurasjon
              - Min/maks verdi validering
              - Automatisk formattering for visning
            
            - **Decimal**: Presise desimaltall for finansielle beregninger
              - Konfigurerbar presisjon og skala
              - Automatisk avrunding og formattering
              - Støtte for valutaformater
            
            - **Boolean**: Sann/usann verdier med fleksible input-formater
              - Aksepterer true/false, 1/0, yes/no
              - Konsistent JSON-serialisering
              - Brukervennlig visning i grensesnitt
            
            - **DateTime**: Komplett dato- og tidshåndtering
              - UTC og lokal timezone-støtte
              - ISO 8601 formatstandard
              - Automatisk parsing av vanlige datoformater
            
            - **Guid**: Universelt unike identifikatorer
              - RFC 4122 kompatible UUIDs
              - Automatisk generering ved behov
              - Optimalisert for databaser og indeksering
            
            - **Email**: E-postadresser med omfattende validering
              - RFC 5322 standard validering
              - Domene-eksistenssjekking (valgfritt)
              - Automatisk normalisering og case-håndtering
            
            - **Phone**: Telefonnummer med internasjonal støtte
              - E.164 formatstandard
              - Automatisk lands-kode gjenkjenning
              - Formattering basert på lokale standarder
            
            - **Url**: Web-adresser med protokoll-validering
              - HTTP/HTTPS protokoll-støtte
              - Domene og sti-validering
              - Automatisk URL-encoding ved behov
            
            - **Json**: Strukturerte JSON-objekter
              - Skjemavalidering mot JSON Schema
              - Dype objektvalidering og type-checking
              - Optimaliert lagring og indeksering
            
            **Bruksscenarioer:**
            - Dynamisk brukergrensesnitt-generering
            - API-dokumentasjon og skjemavalidering
            - Integrasjonsmapping og datatransformasjon
            - Rapportkolonne-konfigurasjon og filtrering
            
            **Implementasjonsdetaljer:**
            - Alle datatyper støtter null-verdier (nullable)
            - Automatisk type-konvertering fra strenger
            - Konsistent feilmeldinger ved valideringsfeil
            - Ytelsesoptimalisert lagring og indeksering
            </remarks>
            <returns>Liste over tilgjengelige datatyper med metadata</returns>
            <response code="200">Datatyper hentet vellykket</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetPropertyValues(System.Int32,System.Int32,System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Boolean},System.String)">
            <summary>
            Get all property values with optional filtering and pagination
            </summary>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="entityInstanceId">Filter by entity instance ID</param>
            <param name="propertyDefinitionId">Filter by property definition ID</param>
            <param name="isDefault">Filter by default status</param>
            <param name="search">Search in value and display value</param>
            <returns>Paginated list of property values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetPropertyValue(System.Guid)">
            <summary>
            Get property value by ID
            </summary>
            <param name="id">Property value ID</param>
            <returns>Property value details</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.CreatePropertyValue(SP.RBAC.API.DTOs.CreatePropertyValueDto)">
            <summary>
            Create a new property value
            </summary>
            <param name="dto">Property value creation data</param>
            <returns>Created property value</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.UpdatePropertyValue(System.Guid,SP.RBAC.API.DTOs.UpdatePropertyValueDto)">
            <summary>
            Update an existing property value
            </summary>
            <param name="id">Property value ID</param>
            <param name="dto">Property value update data</param>
            <returns>Updated property value</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.DeletePropertyValue(System.Guid)">
            <summary>
            Delete a property value
            </summary>
            <param name="id">Property value ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetEntityInstancePropertyValues(System.Guid,System.Boolean)">
            <summary>
            Get property values for a specific entity instance
            </summary>
            <param name="entityInstanceId">Entity instance ID</param>
            <param name="includeHistory">Include historical (expired) values</param>
            <returns>List of entity instance's property values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetPropertyDefinitionValues(System.Guid,System.Boolean)">
            <summary>
            Get property values for a specific property definition
            </summary>
            <param name="propertyDefinitionId">Property definition ID</param>
            <param name="includeHistory">Include historical (expired) values</param>
            <returns>List of property definition's values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.GetEntityInstancePropertyValueHistory(System.Guid)">
            <summary>
            Get property value history for an entity instance grouped by property definition
            </summary>
            <param name="entityInstanceId">Entity instance ID</param>
            <returns>Property value history grouped by property definition</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.PropertyValuesController.ExpirePropertyValue(System.Guid,System.DateTime)">
            <summary>
            Set property value effective end date (expire it)
            </summary>
            <param name="id">Property value ID</param>
            <param name="effectiveTo">Effective end date</param>
            <returns>Updated property value</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncLogs(System.Int32,System.Int32,System.Nullable{System.Guid},System.String,System.Nullable{SP.RBAC.API.Entities.SyncStatus},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Get all sync logs with optional filtering and pagination
            </summary>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="integrationSystemId">Filter by integration system ID</param>
            <param name="operation">Filter by operation type</param>
            <param name="status">Filter by sync status</param>
            <param name="startDate">Filter by start date (from)</param>
            <param name="endDate">Filter by start date (to)</param>
            <param name="search">Search in operation and error message</param>
            <returns>Paginated list of sync logs</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncLog(System.Guid)">
            <summary>
            Get sync log by ID
            </summary>
            <param name="id">Sync log ID</param>
            <returns>Sync log details</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.CreateSyncLog(SP.RBAC.API.DTOs.CreateSyncLogDto)">
            <summary>
            Create a new sync log
            </summary>
            <param name="dto">Sync log creation data</param>
            <returns>Created sync log</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.UpdateSyncLog(System.Guid,SP.RBAC.API.DTOs.UpdateSyncLogDto)">
            <summary>
            Update an existing sync log
            </summary>
            <param name="id">Sync log ID</param>
            <param name="dto">Sync log update data</param>
            <returns>Updated sync log</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.DeleteSyncLog(System.Guid)">
            <summary>
            Delete a sync log
            </summary>
            <param name="id">Sync log ID</param>
            <returns>Success status</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetIntegrationSystemSyncLogs(System.Guid,System.Int32,System.Int32,System.Nullable{SP.RBAC.API.Entities.SyncStatus})">
            <summary>
            Get sync logs for a specific integration system
            </summary>
            <param name="integrationSystemId">Integration system ID</param>
            <param name="page">Page number (1-based)</param>
            <param name="pageSize">Number of items per page</param>
            <param name="status">Filter by sync status</param>
            <returns>List of integration system's sync logs</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncStatuses">
            <summary>
            Get sync status enum values
            </summary>
            <returns>List of sync status values</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetSyncLogSummary(System.Nullable{System.Guid},System.Int32)">
            <summary>
            Get sync log summary statistics
            </summary>
            <param name="integrationSystemId">Optional filter by integration system</param>
            <param name="days">Number of days to look back (default 30)</param>
            <returns>Sync log summary statistics</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.CompleteSyncLog(System.Guid,SP.RBAC.API.DTOs.UpdateSyncLogDto)">
            <summary>
            Complete a sync log operation
            </summary>
            <param name="id">Sync log ID</param>
            <param name="dto">Completion data</param>
            <returns>Updated sync log</returns>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SyncLogsController.GetRecentFailedSyncLogs(System.Int32,System.Int32)">
            <summary>
            Get recent failed sync logs
            </summary>
            <param name="hours">Number of hours to look back (default 24)</param>
            <param name="limit">Maximum number of records to return (default 50)</param>
            <returns>List of recent failed sync logs</returns>
        </member>
        <member name="T:SP.RBAC.API.Controllers.SystemRelationshipController">
            <summary>
            Administrerer relasjoner og integrasjoner mellom eksterne integrasjonssystemer
            </summary>
            <remarks>
            Systemrelasjoner definerer hvordan data flyter mellom systemer, integrasjonsmetoder og synkroniseringsfrekvenser.
            
            **Hovedfunksjoner:**
            - Opprette og konfigurere nye systemrelasjoner
            - Overvåke og administrere eksisterende integrasjoner
            - Aktivere/deaktivere dataflyt mellom systemer
            - Analysere relasjonsmønstre og systemarkitektur
            
            **Relasjonstyper:**
            - Enveys dataflyt (Source → Target)
            - Toveis datasynkronisering (Bidirectional)
            - Event-baserte integrasjoner
            - Batch-baserte dataoverføringer
            
            **Integrasjonsmetoder:**
            - REST API-kall
            - Message Queue systemer
            - Databasesynkronisering
            - Filbaserte integrasjoner
            
            **Sikkerhet og etterlevelse:**
            - Kryptering av sensitive dataflyter
            - Auditlogging av alle integrasjonsaktiviteter
            - Tilgangskontroll basert på systemroller
            - Overholdelse av GDPR og databeskyttelsesregler
            </remarks>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetSystemRelationships(SP.RBAC.API.DTOs.SystemRelationshipSearchRequest)">
            <summary>
            Hent paginerte systemrelasjoner med filtrering og sortering
            </summary>
            <remarks>
            Returnerer en paginert liste over alle systemrelasjoner med mulighet for filtrering på:
            - Relasjonstype (source-target, bidirectional, event-based)
            - Aktivitetsstatus (active, inactive, pending)
            - Kildesystem eller målsystem
            - Integrasjonsmetode (REST, Message Queue, Database, File)
            
            **Bruksscenarioer:**
            - Få oversikt over alle aktive integrasjoner
            - Identifisere systemer med mange avhengigheter
            - Planlegge systemoppgraderinger og vedlikehold
            - Analysere dataflyt-mønstre og systemarkitektur
            
            **Sorteringsmuligheter:**
            - Opprettelsesdato (nyeste/eldste først)
            - Systemnavnene (alfabetisk)
            - Aktivitetsstatus og ytelsesmetrikker
            - Sist modifisert tidspunkt
            
            **Ytelsesoptimalisering:**
            - Støtter lazy loading av relaterte entiteter
            - Effektiv paginering for store datamengder
            - Caching av hyppig brukte relasjonslister
            </remarks>
            <param name="request">Paginering og filtreringsparametere</param>
            <returns>Paginert liste med systemrelasjoner</returns>
            <response code="200">Vellykket uthenting av systemrelasjoner</response>
            <response code="400">Ugyldig forespørsel eller parametere</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetSystemRelationship(System.Guid)">
            <summary>
            Hent en spesifikk systemrelasjon med fullstendige detaljer
            </summary>
            <remarks>
            Returnerer detaljert informasjon om en enkelt systemrelasjon inkludert:
            - Komplette kilde- og målsystemdetaljer
            - Integrasjonskonfigurasjon og dataflyt-parametere
            - Relaterte dokumenter og integrasjonshistorikk
            - Status og ytelsesmetrikker
            
            **Bruksscenarioer:**
            - Validere relasjonskonfigurasjon før endringer
            - Analysere integrasjonsytelse og dataflyt
            - Feilsøke integrasjonsproblemer
            - Dokumentere systemarkitektur og avhengigheter
            
            **Inkluderte data:**
            - Kildesystem: Navn, type, status og konfigurasjon
            - Målsystem: Navn, type, status og konfigurasjon  
            - Relasjon: Type, beskrivelse, dataflyt og frekvens
            - Dokumenter: Teknisk dokumentasjon og integrasjonsguider
            </remarks>
            <param name="id">Unik identifikator for systemrelasjonen</param>
            <returns>Detaljerte opplysninger om systemrelasjonen</returns>
            <response code="200">Systemrelasjon funnet og returnert</response>
            <response code="404">Systemrelasjon ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.CreateSystemRelationship(SP.RBAC.API.DTOs.CreateSystemRelationshipRequest)">
            <summary>
            Opprett ny systemrelasjon med konfigurasjon og validering
            </summary>
            <remarks>
            Oppretter en ny systemrelasjon mellom to eksisterende integrasjonssystemer.
            Operasjonen validerer kompatibilitet og konfigurerer automatisk grunnleggende integrasjonsparametere.
            
            **Valideringsprosess:**
            1. Verifiserer at begge systemer eksisterer og er aktive
            2. Sjekker for eksisterende relasjoner for å unngå duplikater
            3. Validerer kompatibilitet mellom systemtyper og protokoller
            4. Tester grunnleggende tilkobling og autentisering
            
            **Automatisk konfigurasjon:**
            - Anbefalt integrasjonsmetode basert på systemtyper
            - Standard dataflyt-retning og synkroniseringsfrekvens
            - Sikkerhetskonfigurasjon og krypteringsinnstillinger
            - Overvåking og logging-parametere
            
            **Tillatte relasjonstyper:**
            - SOURCE_TO_TARGET: Enveys dataflyt fra kilde til mål
            - BIDIRECTIONAL: Toveis datasynkronisering
            - EVENT_DRIVEN: Event-basert integrasjon
            - BATCH_TRANSFER: Planlagte batch-overføringer
            
            **Integrasjonsmetoder:**
            - REST_API: HTTP-baserte API-kall
            - MESSAGE_QUEUE: Asynkron meldingskø
            - DATABASE_SYNC: Direktesynkronisering mellom databaser
            - FILE_TRANSFER: Filbaserte dataoverføringer
            
            **Eksempel request:**
            ```json
            {
              "sourceSystemId": "123e4567-e89b-12d3-a456-426614174000",
              "targetSystemId": "987fcdeb-51a2-43d1-9f47-123456789abc",
              "relationshipType": "SOURCE_TO_TARGET",
              "description": "Synkronisering av brukerdata fra HR-system til Active Directory",
              "dataFlow": "Unidirectional",
              "integrationMethod": "REST_API",
              "frequency": "Daily"
            }
            ```
            </remarks>
            <param name="request">Konfigurasjon for den nye systemrelasjonen</param>
            <returns>Opprettet systemrelasjon med generert ID</returns>
            <response code="201">Systemrelasjon opprettet vellykket</response>
            <response code="400">Ugyldig forespørsel eller valideringsfeil</response>
            <response code="409">Relasjon eksisterer allerede mellom systemene</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.UpdateSystemRelationship(System.Guid,SP.RBAC.API.DTOs.UpdateSystemRelationshipRequest)">
            <summary>
            Oppdater eksisterende systemrelasjon med ny konfigurasjon
            </summary>
            <remarks>
            Oppdaterer en eksisterende systemrelasjon med ny metadata, konfigurasjon eller strukturelle endringer.
            Støtter delvis oppdateringer mens dataintegritet og referanserestriksjoner opprettholdes.
            
            **Oppdateringsmuligheter:**
            - Endre relasjonsbeskrivelse og dokumentasjon
            - Justere dataflyt-retning og integrasjonsmetode
            - Modifisere synkroniseringsfrekvens og tidspunkter
            - Oppdatere tekniske parametere og konfigurasjon
            
            **Begrensninger og validering:**
            - Kan ikke endre kilde- eller målsystem etter opprettelse
            - Relasjonstype kan ikke endres hvis aktive dataflyter eksisterer
            - Endringer må være kompatible med eksisterende integrasjoner
            - Oppgi grunn for endring for sporbarhet og revisjon
            
            **Påvirkningsanalyse:**
            - Endring av integrasjonsmetode kan påvirke eksisterende synkroniseringsprosesser
            - Modifisering av frekvens kan påvirke systemytelse og dataaktualitet
            - Dataflyt-endringer kan kreve rekonfigurasjon av målsystemer
            
            **Eksempel request:**
            ```json
            {
              "description": "Oppdatert: Inkluderer nå også avdelingsinformasjon",
              "dataFlow": "Bidirectional",
              "integrationMethod": "MESSAGE_QUEUE", 
              "frequency": "Hourly"
            }
            ```
            </remarks>
            <param name="id">Unik identifikator for systemrelasjonen som skal oppdateres</param>
            <param name="request">Oppdateringsinformasjon for systemrelasjonen</param>
            <returns>Oppdatert systemrelasjon</returns>
            <response code="200">Systemrelasjon oppdatert vellykket</response>
            <response code="400">Ugyldig forespørsel eller valideringsfeil</response>
            <response code="404">Systemrelasjon ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.DeactivateSystemRelationship(System.Guid)">
            <summary>
            Deaktiver systemrelasjon (myk sletting med avhengighetsvalidering)
            </summary>
            <remarks>
            Utfører myk deaktivering av en systemrelasjon etter validering av at ingen kritiske avhengigheter eksisterer.
            Denne operasjonen markerer relasjonen som inaktiv uten å fysisk fjerne den fra databasen.
            
            **Deaktiveringsprosess:**
            1. Validerer at ingen kritiske dataflyter er avhengige av relasjonen
            2. Stopper aktive synkroniseringsprosesser gradvis
            3. Markerer relasjon som inaktiv med timestamp og årsak
            4. Opprettholder historiske data for etterlevelse og revisjon
            
            **Avhengighetsvalidering:**
            - Sjekker for aktive datasynkroniseringsjobber
            - Identifiserer kritiske integrasjonspunkter som kan påvirkes
            - Vurderer nedstrøms systemer som er avhengige av dataflyt
            
            **Gjenopprettingsmuligheter:**
            - Deaktiverte relasjoner kan reaktiveres via activate-endpoint
            - All konfigurasjon og metadata bevares for rask gjenoppretting
            - Integrasjonshistorikk opprettholdes for analyse og feilsøking
            
            **Alternative tiltak:**
            - Vurder midlertidig pausing i stedet for full deaktivering
            - Bruk planlagt vedlikehold for kritiske integrasjoner
            - Kontakt systemadministrator for komplekse avhengighetsløsninger
            
            **Påvirkningsanalyse:**
            - Stopper alle nye dataoverføringer mellom systemene
            - Eksisterende data i målsystemer påvirkes ikke
            - Rapporter og analyser kan trenge filteroppdateringer
            </remarks>
            <param name="id">Unik identifikator for systemrelasjonen som skal deaktiveres</param>
            <returns>Ingen innhold ved vellykket deaktivering</returns>
            <response code="204">Systemrelasjon deaktivert vellykket</response>
            <response code="400">Kan ikke deaktivere relasjon med kritiske aktive avhengigheter</response>
            <response code="404">Systemrelasjon ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.ActivateSystemRelationship(System.Guid)">
            <summary>
            Aktiverer eller reaktiverer systemrelasjon med validering
            </summary>
            <remarks>
            Aktiverer en deaktivert systemrelasjon eller reaktiverer en tidligere inaktiv integrasjon.
            Operasjonen validerer systemtilgjengelighet og kompatibilitet før aktivering.
            
            **Aktiveringsprosess:**
            1. Validerer tilgjengelighet av begge systemendepunkter
            2. Tester autentisering og autorisasjon
            3. Verifiserer dataskjema-kompatibilitet
            4. Initialiserer overvåking og logging
            5. Markerer relasjon som aktiv med starttidspunkt
            
            **Kompatibilitetssjekker:**
            - API-versjonering og endepunktstabilitet
            - Dataskjemavalidering mot målsystem
            - Sikkerhetsprotokoller og sertifikater
            - Kapasitets- og ytelsesbaseline
            
            **Forutsetninger for aktivering:**
            - Begge systemer må være tilgjengelige og responsiv
            - Gyldig autentisering må være konfigurert
            - Nødvendige tillatelser må være på plass
            - Systemmoduler må være kompatible med konfigurasjon
            
            **Overvåking og varsling:**
            - Aktivering utløser automatisk helsesjekker
            - Etablerer overvåkingsbaseline for ytelse
            - Konfigurerer varsling for kritiske feil
            
            **Feilhåndtering:**
            - Automatisk rollback ved valideringsfeil
            - Detaljerte feilmeldinger for feilsøking
            - Forslag til korrigerende tiltak ved kjente problemer
            </remarks>
            <param name="id">Unik identifikator for systemrelasjonen som skal aktiveres</param>
            <returns>Ingen innhold ved vellykket aktivering</returns>
            <response code="204">Systemrelasjon aktivert vellykket</response>
            <response code="400">Valideringsfeil - system ikke klar for aktivering</response>
            <response code="404">Systemrelasjon ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetRelationshipsBySystem(System.Guid)">
            <summary>
            Hent alle relasjoner for et spesifikt system (både kilde og mål)
            </summary>
            <remarks>
            Returnerer en komplett oversikt over alle systemrelasjoner hvor det angitte systemet fungerer enten som kilde eller mål.
            Inkluderer både aktive og inaktive relasjoner med full kontekstuell informasjon.
            
            **Bruksscenarioer:**
            - Kartlegge systemavhengigheter før oppgraderinger
            - Analysere påvirkningsområde for systemendringer
            - Dokumentere systemarkitektur og dataflyt
            - Planlegge vedlikehold og nedetid
            
            **Inkluderte relasjonstyper:**
            - Utgående relasjoner (system som kilde)
            - Innkommende relasjoner (system som mål)
            - Bidireksjonelle integrasjoner
            - Event-baserte tilkoblinger
            
            **Datagruppering:**
            - Relasjoner gruppert etter retning (inn/ut)
            - Status-kategorisering (aktiv/inaktiv/vedlikehold)
            - Integrasjonsmetode-klassifisering
            - Kritikalitetsnivå basert på datavolum og frekvens
            
            **Systemanalyse:**
            - Identifiserer systemets rolle i integrasjonsarkitekturen
            - Beregner avhengighetsgrad og kritikalitet
            - Rapporterer integrasjonskapasitet og belastning
            </remarks>
            <param name="systemId">Unik identifikator for systemet</param>
            <returns>Komplette relasjonsdata for systemet</returns>
            <response code="200">Systemrelasjoner hentet vellykket</response>
            <response code="404">System ikke funnet med angitt ID</response>
            <response code="500">Intern serverfeil oppstod</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetIntegrationArchitecture">
            <summary>
            Generer integrasjonsarkitektur-oversikt for rapportering
            </summary>
            <remarks>
            Produserer en omfattende rapport over systemintegrasjonsarkitekturen inkludert:
            - Nettverkstopologi og systemsammenkobling
            - Kritiske dataflyt-stier og avhengighetskart
            - Kapasitetsanalyse og ytelsesmetrikker
            - Sikkerhetsvurdering og risikoanalyse
            
            **Arkitekturanalyse:**
            - Identifiserer sentrale knutepunktsystemer (high-degree nodes)
            - Kartlegger kritiske enkeltpunktsfeil (single points of failure)
            - Analyserer dataflyt-mønstre og integrasjonsvolum
            - Vurderer systemmodenhet og teknisk gjeld
            
            **Rapporterings-elementer:**
            - Grafisk fremstilling av systemtopologi
            - Tabeller med relasjonsdetaljer og konfigurasjoner
            - Trendanalyse og kapasitetsplanlegging
            - Anbefalinger for arkitekturoptimalisering
            
            **Bruksområder:**
            - Årlig arkitekturgjennomgang og dokumentasjon
            - Compliance-rapportering til ledelse og revisorer
            - Planlegging av systemutskiftinger og oppgraderinger
            - Risikovurdering og kontinuitetsplanlegging
            
            **Tekniske detaljer:**
            - Inkluderer versjonsinformasjon og API-kompatibilitet
            - Rapporterer integrasjonshelse og oppetidsstatistikk
            - Dokumenterer datavolum og ytelsesbaseline
            - Identifiserer potensielle optimaliseringsmuligheter
            </remarks>
            <returns>Omfattende integrasjonsarkitektur-rapport</returns>
            <response code="200">Arkitekturrapport generert vellykket</response>
            <response code="500">Intern serverfeil under rapportgenerering</response>
        </member>
        <member name="M:SP.RBAC.API.Controllers.SystemRelationshipController.GetRelationshipStatistics">
            <summary>
            Generer statistikk og metrikker for systemrelasjoner
            </summary>
            <remarks>
            Beregner og returnerer omfattende statistikk og nøkkelmetrikker for systemintegrasjoner:
            - Aktivitets- og tilgjengelighetstall
            - Integrasjonsmetode-fordeling og bruksmønstre
            - Systembelastning og kapasitetsutnyttelse
            - Trends og ytelsesutvikling over tid
            
            **Statistiske kategorier:**
            - Kvantitative mål: Antall aktive/inaktive relasjoner, gjennomsnittlig oppetid
            - Kvalitative indikatorer: Integrasjonshelse, feilfrekvens, responsivitets
            - Trendanalyse: Vekstrate, sesonaliteter, mønstre i datatrafikk
            - Sammenligningsdata: Benchmark mot beste praksis og industristandarder
            
            **Nøkkeltall for ledelse:**
            - Systemintegrasjonsmodnhet og digitalisering-score
            - Kostnad per integrasjon og ROI-beregninger
            - Risikovurdering og compliance-overholdelse
            - Kapasitetsplanlegging og tekniske investeringsbehov
            
            **Operasjonelle metrikker:**
            - Systemrespons og ytelseskarakteristika
            - Feiltoleranse og gjenopprettingshastighet
            - Datavolum og gjennomstrømming per integrasjon
            - Vedlikeholdskostnader og operasjonell effektivitet
            
            **Automatisering og varsling:**
            - Terskelverdier for kritiske nøkkeltall
            - Proaktiv varsling ved avvik fra baseline
            - Prediktiv analyse av systemkapasitetsbehov
            - Automatisk rapportering til interessenter
            </remarks>
            <returns>Omfattende statistikk og metrikker for systemintegrasjoner</returns>
            <response code="200">Statistikk generert vellykket</response>
            <response code="500">Intern serverfeil under statistikkberegning</response>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditLogDto">
            <summary>
            DTO for audit log data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditSearchRequest">
            <summary>
            Request model for audit search operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.ComplianceReportDto">
            <summary>
            DTO for compliance reporting
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.ActivitySummaryDto">
            <summary>
            DTO for activity summary dashboard
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateAuditLogRequest">
            <summary>
            Request model for creating audit log entries
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditOperationResult">
            <summary>
            Response model for audit operation results
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.AuditStatisticsDto">
            <summary>
            DTO for audit log statistics
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.BulkAuditRequest">
            <summary>
            Request model for bulk audit operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.BulkAuditResponse">
            <summary>
            Response model for bulk audit operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingDto">
            <summary>
            DTO for integration mapping data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateIntegrationMappingRequest">
            <summary>
            Request model for creating integration mappings
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.UpdateIntegrationMappingRequest">
            <summary>
            Request model for updating integration mappings
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemRelationshipDto">
            <summary>
            DTO for system relationship data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateSystemRelationshipRequest">
            <summary>
            Request model for creating system relationships
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationDocumentDto">
            <summary>
            DTO for integration document data transfer
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.CreateIntegrationDocumentRequest">
            <summary>
            Request model for creating integration documents
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.UpdateIntegrationDocumentRequest">
            <summary>
            Request model for updating integration documents
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingSearchRequest">
            <summary>
            Request model for searching integration mappings
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemRelationshipSearchRequest">
            <summary>
            Request model for searching system relationships
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationDocumentSearchRequest">
            <summary>
            Request model for searching integration documents
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationArchitectureDto">
            <summary>
            Response model for integration architecture overview
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingStatsDto">
            <summary>
            Response model for integration mapping statistics
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.PaginatedResponseDto`1">
            <summary>
            Paginated response wrapper
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationMappingStatisticsDto">
            <summary>
            Integration mapping statistics response
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemMappingCountDto">
            <summary>
            System mapping count DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.UpdateSystemRelationshipRequest">
            <summary>
            Update system relationship request
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.SystemRelationshipsDto">
            <summary>
            System relationships wrapper
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationSystemSummaryDto">
            <summary>
            Integration system summary DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.RelationshipStatisticsDto">
            <summary>
            Relationship statistics DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.RelationshipTypeCountDto">
            <summary>
            Relationship type count DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.IntegrationDocumentHistoryDto">
            <summary>
            Integration document history DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.DocumentStatisticsDto">
            <summary>
            Document statistics DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.DocumentTypeCountDto">
            <summary>
            Document type count DTO
            </summary>
        </member>
        <member name="T:SP.RBAC.API.DTOs.DocumentSearchRequest">
            <summary>
            Document search request
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.AccessAssignment">
            <summary>
            Represents access assignments (user-role-system mappings)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.AccessRule">
            <summary>
            Defines business rules for automatic access assignment
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetHttpContext(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            Set HTTP context information for the audit log
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetUserInfo(System.String,System.String)">
            <summary>
            Set user information for the audit log
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetEntityChange(System.String,System.String)">
            <summary>
            Set entity change information
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.AuditLog.SetJustification(System.String)">
            <summary>
            Set justification for the audit action
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.EntityDefinition">
            <summary>
            Defines the structure of entities within an integration system (e.g., User, Role, Department)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.EntityInstance">
            <summary>
            Represents a specific instance of an entity (e.g., a specific user, role, department)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.RelationshipType">
            <summary>
            Types of relationships between integration systems
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.DocumentType">
            <summary>
            Types of integration documentation
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationMapping">
            <summary>
            Represents a mapping between external system fields and internal entity properties
            Used for documenting and managing data transformations during system integrations
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationMapping.Create(System.Guid,System.Guid,System.String,System.String,System.String)">
            <summary>
            Factory method to create a new integration mapping
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationMappingHistory">
            <summary>
            Tracks changes to integration mappings over time
            Essential for maintaining audit trail of integration configuration changes
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationMappingHistory.Create(System.Guid,System.String,System.String,System.String,System.String)">
            <summary>
            Factory method to create a new mapping history entry
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.SystemRelationship">
            <summary>
            Documents the relationship and dependencies between different integration systems
            Critical for understanding system architecture and impact analysis
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.SystemRelationship.Create(System.Guid,System.Guid,SP.RBAC.API.Entities.RelationshipType,System.String)">
            <summary>
            Factory method to create a new system relationship
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationDocument">
            <summary>
            Stores documentation, diagrams, and procedural information for system integrations
            Serves as a knowledge base for integration management and troubleshooting
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationDocument.Create(System.Guid,System.String,SP.RBAC.API.Entities.DocumentType,System.String)">
            <summary>
            Factory method to create a new integration document
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationDocumentHistory">
            <summary>
            Maintains version history of integration documents
            Enables rollback capabilities and change tracking for documentation
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Entities.IntegrationDocumentHistory.Create(System.Guid,System.String,System.String,System.Int32,System.String)">
            <summary>
            Factory method to create a new document history entry
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.IntegrationSystem">
            <summary>
            Represents an external system that can be integrated with the IAM solution
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.PropertyDefinition">
            <summary>
            Defines properties/attributes for entities (e.g., User.Username, User.Email, Role.Name)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.PropertyValue">
            <summary>
            Stores the actual values for entity properties (EAV pattern)
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Entities.SyncLog">
            <summary>
            Logs synchronization activities with external systems
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Middleware.AuditMiddleware">
            <summary>
            Middleware to automatically log audit information for HTTP requests
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Middleware.AuditMiddlewareExtensions">
            <summary>
            Extension methods for registering audit middleware
            </summary>
        </member>
        <member name="M:SP.RBAC.API.Middleware.AuditMiddlewareExtensions.UseAuditLogging(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Register the audit middleware in the request pipeline
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Swagger.SwaggerDocumentFilter">
            <summary>
            Document filter to enhance the Swagger documentation with additional metadata and examples
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Swagger.SwaggerResponseExamplesFilter">
            <summary>
            Operation filter to add response examples to Swagger operations
            </summary>
        </member>
        <member name="T:SP.RBAC.API.Swagger.SwaggerSchemaExampleFilter">
            <summary>
            Schema filter to add examples to request and response models in Swagger
            </summary>
        </member>
    </members>
</doc>
